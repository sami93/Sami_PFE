node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 704
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 704
          }
        }
        tensor_content: ".o\214`\242\277\303?\000\000\000\000\000\000\000\000D\177\'\253\345\215\261?.o\214`\242\277\323?\214\346\304\335\236\343\342?\000\000\000\000\000\000\000\000\222$I\222$I\302?\2741\202\211\376N\346?\035\324A\035\324A\255?.o\214`\242\277\343?D\177\'\253\345\215\341?\000\000\000\000\000\000\000\000\026_\361\025_\361\325?z\024\256G\341z\304?\307\305\024k6R\345?\000\000\000\000\000\000\000\000D\177\'\253\345\215\221?\240\224\014\277\031\370\240?\317. 6\225\206\334?D\177\'\253\345\215\261?\310\271\317. 6\305?\327)\223[\025\345\203?\324A\035\324A\035\324?\000\000\000\000\000\000\000\000\026_\361\025_\361\325?\222$I\222$I\302?\247\t]\306\216H\250?L\364w\262Z\336\330?\035\324A\035\324A\275?\035\324A\035\324A\315?\222$I\222$I\262?\035\324A\035\324A\215?5\344\334g\027\020\333?\026_\361\025_\361\305?\347>\273\200\330T\272?z\024\256G\341z\304?_4\'\356\366\034\307?\261\2514\344\334g\247?X|\305W|\305\327?_\361\025_\361\025\337?\333\266m\333\266m\333?D\177\'\253\345\215\261?\310\271\317. 6\325?\026_\361\025_\361\265?\202\211\376NV\313\273?\367\331\005\304\246\322\300?2?xoIO\243?z\024\256G\341z\244?\000\000\000\000\000\000\000\000\035\324A\035\324A\275?\367_(\342\261\340\340?D\177\'\253\345\215\261?\035\324A\035\324A\275?\035\324A\035\324A\275?\026_\361\025_\361\305?\n\327\243p=\n\327?\"\347>\273\200\330\324?\000\000\000\000\000\000\000\000\323\nQ\201R2\334?P\007uP\007u\320?\216T]\203}\271r?;\337O\215\227n\342?\376NV\313\033#\310?\000\000\000\000\000\000\000\000\202\211\376NV\313\313?\354Q\270\036\205\353\321?z\024\256G\341z\304?\005\304\246\322\220s\317?5\344\334g\027\020\333?\026_\361\025_\361\305?\270\036\205\353Q\270\316?\222$I\222$I\302?\310\271\317. 6\325?\026_\361\025_\361\265?\310\271\317. 6\325?\000\000\000\000\000\000\000\000X|\305W|\305\307?P\007uP\007u\300?\035\324A\035\324A\315?\202\211\376NV\313\313?\261\2514\344\334g\267?\333\266m\333\266m\353?uP\007uP\007\345?\316}v\001\261\251\344?\000\000\000\000\000\000\000\000z\024\256G\341z\304?\000\000\000\000\000\000\000\000\026_\361\025_\361\305?\000\000\000\000\000\000\000\000\231\231\231\231\231\231\311?P\007uP\007u\340?\310\271\317. 6\305?\000\000\000\000\000\000\000\000d\301\001n\230\245\336?>\204\264\205e/\332?\270\036\205\353Q\270\316?\200\241\210\307\202\003\314?P\007uP\007u\340?\324A\035\324A\035\344?\000\000\000\000\000\000\000\000\254\2267F0\321\337?P\007uP\007u\300?P\007uP\007u\340?z\024\256G\341z\304?\231\334\252(\237\240\321?X|\305W|\305\327?\236\254\2267F0\321?D\177\'\253\345\215\321?X|\305W|\305\327?\202\211\376NV\313\333?L\364w\262Z\336\310?\276\342+\276\342+\336?\000\000\000\000\000\000\000\000<\323\nQ\201R\322?P\007uP\007u\340?\347>\273\200\330T\272?\375\235\254\2267F\340?\310\271\317. 6\305?/W\002\350u\207\303?\347>\273\200\330T\312?\000\000\000\000\000\000\000\000L\364w\262Z\336\330?\236\254\2267F0\321?\035\324A\035\324A\335?\000\000\000\000\000\000\000\000\2524\344\334g\027\300?\026_\361\025_\361\325?\000\000\000\000\000\000\000\000\035\324A\035\324A\315?\222$I\222$I\342?\000\000\000\000\000\000\000\000w\001\261\2514\344\334?uP\007uP\007\345?\035\324A\035\324A\335?\000\000\000\000\000\000\000\000\222$I\222$I\322?_4\'\356\366\034\267?z\024\256G\341z\304?\000\000\000\000\000\000\000\000\202\211\376NV\313\313?\035\324A\035\324A\255?\022L\364w\262Z\336?\343n\317q1\305\272?\026_\361\025_\361\305?z\024\256G\341z\264?\026_\361\025_\361\265?\026_\361\025_\361\265?\026_\361\025_\361\305?\303\246\322\220s\237\335?9\367\331\005\304\246\322?D\177\'\253\345\215\321?\000\000\000\000\000\000\000\000\222$I\222$I\322?5\344\334g\027\020\313?\035\324A\035\324A\315?\202\211\376NV\313\273?\026_\361\025_\361\245?\2524\344\334g\027\300?\000\000\000\000\000\000\000\000\261\2514\344\334g\247?\026_\361\025_\361\305?\231\231\231\231\231\231\331?\303\246\322\220s\237\335?\222$I\222$I\302?\222$I\222$I\302?\000\000\000\000\000\000\000\000P\007uP\007u\340?\035\324A\035\324A\275?uP\007uP\007\325?\202\211\376NV\313\273?\324A\035\324A\035\344?\000\000\000\000\000\000\000\0009\367\331\005\304\246\322?\035\324A\035\324A\255?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\202\211\376NV\313\273?\222$I\222$I\322?X|\305W|\305\327?\000\000\000\000\000\000\000\000\026_\361\025_\361\305?\000\000\000\000\000\000\000\000\324A\035\324A\035\324?\231\231\231\231\231\231\271?9\367\331\005\304\246\342?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\376NV\313\033#\310?\247\t]\306\216H\250?R\270\036\205\353Q\350?\340\311jyc\004\263?\035\324A\035\324A\275?\035\324A\035\324A\275?\345\215\021L\364w\342?\035\324A\035\324A\315?\261\2514\344\334g\247?\231\231\231\231\231\231\331?\035\324A\035\324A\275?\231\231\231\231\231\231\311?L\364w\262Z\336\310?\333\266m\333\266m\333?\026_\361\025_\361\305?\026_\361\025_\361\265?\035\324A\035\324A\275?\000\000\000\000\000\000\000\000\261f#U\327`\337?\000\000\000\000\000\000\000\000\261\2514\344\334g\307?.o\214`\242\277\323?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\324A\035\324A\275?\276\342+\276\342+\336?D\177\'\253\345\215\321?P\007uP\007u\320?\261\2514\344\334g\267?\035\324A\035\324A\275?\202\211\376NV\313\313?\270\036\205\353Q\270\276?\035\324A\035\324A\275?\2524\344\334g\027\300?\026_\361\025_\361\245?\236\254\2267F0\321?\000\000\000\000\000\000\000\000\261\2514\344\334g\267?\324A\035\324A\035\324?\000\000\000\000\000\000\000\000\365\361\217<\323\n\321?_\361\025_\361\025\337?\000\000\000\000\000\000\000\000\026_\361\025_\361\265?\324A\035\324A\035\324?L\364w\262Z\336\330?\026_\361\025_\361\265?\340\311jyc\004\303?o\214`\242\277\223\325?\000\000\000\000\000\000\000\000\035\324A\035\324A\275?\202\211\376NV\313\333?\206\234\373\354\002b\323?P\007uP\007u\320?\343n\317q1\305\312?L\364w\262Z\336\330?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\324A\035\324A\275?\035\324A\035\324A\255?D\177\'\253\345\215\261?\000\000\000\000\000\000\000\000:\250\203:\250\203\332?P\007uP\007u\320?\340\311jyc\004\303?\236\254\2267F0\321?\035\324A\035\324A\255?\035\324A\035\324A\335?\000\000\000\000\000\000\000\000\222$I\222$I\302?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\222$I\222$I\302?\026_\361\025_\361\305?\000\000\000\000\000\000\000\000\267m\333\266m\333\346?\000\000\000\000\000\000\000\000X|\305W|\305\347?\222$I\222$I\322?\026_\361\025_\361\325?\000\000\000\000\000\000\000\000\026_\361\025_\361\305?\026_\361\025_\361\305?333333\323?\347>\273\200\330T\272?\317. 6\225\206\334?D\177\'\253\345\215\321?\035\324A\035\324A\275?X|\305W|\305\307?9\367\331\005\304\246\322?z\024\256G\341z\304?\261\2514\344\334g\267?W\210\n\224\222\341\327?\000\000\000\000\000\000\000\000\222$I\222$I\302?\354Q\270\036\205\353\321?\035\324A\035\324A\275?\310\271\317. 6\325?\222$I\222$I\302?D\177\'\253\345\215\301?\222$I\222$I\322?\035\324A\035\324A\335?\000\000\000\000\000\000\000\000\222$I\222$I\342?\000\000\000\000\000\000\000\000\035\324A\035\324A\275?\035\324A\035\324A\275?.o\214`\242\277\323?\000\000\000\000\000\000\000\000X|\305W|\305\327?\231\231\231\231\231\231\351?\035\324A\035\324A\275?\016\247\217\177\344\231\326?\026_\361\025_\361\325?\000\000\000\000\000\000\000\000\035\324A\035\324A\315?\317. 6\225\206\334?\000\000\000\000\000\000\000\000\035\324A\035\324A\275?\333\266m\333\266m\333?\340\311jyc\004\323?D\177\'\253\345\215\301?P\007uP\007u\320?\000\000\000\000\000\000\000\000\231\231\231\231\231\231\331?\000\000\000\000\000\000\000\000\257~\255\315\003\231\257?\000\000\000\000\000\000\000\000\355\002bSi\310\351?\2741\202\211\376N\326?\231\231\231\231\231\231\351?\216T]\203}\271\202?\222$I\222$I\322?\000\000\000\000\000\000\000\000\222$I\222$I\302?\254\2267F0\321\337?\200\241\210\307\202\003\334?z\024\256G\341z\304?\000\000\000\000\000\000\000\000@l*\r9\367\331?\272I\014\002+\207\326?\000\000\000\000\000\000\000\000\202\211\376NV\313\313?\026_\361\025_\361\345?\222$I\222$I\342?\231\334\252(\237\240\321?\026_\361\025_\361\265?\000\000\000\000\000\000\000\000\003\3340K\275\253\317?\261\2514\344\334g\327?X|\305W|\305\327?\026_\361\025_\361\305?\231\231\231\231\231\231\311?\035\324A\035\324A\275?\333\266m\333\266m\333?\000\000\000\000\000\000\000\000\340\311jyc\004\263?\310\271\317. 6\325?\020X9\264\310v\336?\324A\035\324A\035\324?\202\211\376NV\313\313?\003\3340K\275\253\317?\000\000\000\000\000\000\000\000\231\231\231\231\231\231\351?\035\324A\035\324A\275?z\024\256G\341z\244?\374#\317\264BT\340?\270\036\205\353Q\270\276?L\364w\262Z\336\330?\361\025_\361\025_\341?\344\231V\210\n\224\322?\000\000\000\000\000\000\000\000:\250\203:\250\203\332?\333\266m\333\266m\333?X|\305W|\305\327?\026_\361\025_\361\325?\231\231\231\231\231\231\271?\347>\273\200\330T\272?\000\000\000\000\000\000\000\000\240\224\014\277\031\370\260?\261\2514\344\334g\267?\340\311jyc\004\323?\205\250@)\031~\343?\310\271\317. 6\325?\363\306\010&\372;\331?\035\324A\035\324A\255?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000L\364w\262Z\336\330?jyc\004\023\375\335?\224\325\362\306\010&\332?o\214`\242\277\223\325?P\007uP\007u\340?\261\2514\344\334g\247?\222$I\222$I\342?\035\324A\035\324A\315?\230\350\357d\265\274\341?\035\324A\035\324A\255?\201\330T\032r\356\343?\000\000\000\000\000\000\000\000X|\305W|\305\327?\n\327\243p=\n\327?D\177\'\253\345\215\321?\026_\361\025_\361\325?\333\266m\333\266m\333?\317. 6\225\206\314?\035\324A\035\324A\235?\026_\361\025_\361\305?\026_\361\025_\361\265?\026_\361\025_\361\305?\2524\344\334g\027\260?z\024\256G\341z\324?X|\305W|\305\327?\222$I\222$I\302?\035\324A\035\324A\315?\231\231\231\231\231\231\331?\333\266m\333\266m\333?>\204\264\205e/\332?\261\2514\344\334g\307?\231\231\231\231\231\231\351?\000\000\000\000\000\000\000\000\261\2514\344\334g\247?\231\231\231\231\231\231\331?\231\231\231\231\231\231\311?\000\000\000\000\000\000\000\000\261\2514\344\334g\247?\247LnU\224O\300?\261\2514\344\334g\247?\231\231\231\231\231\231\311?2?xoIO\243?z\024\256G\341z\304?\005\304\246\322\220s\317?\371\301{Kz\232\340?\305\216H\030Gg\275?\000\000\000\000\000\000\000\000\365\256~\255\315\003\271?\026_\361\025_\361\265?\231\231\231\231\231\231\271?z\024\256G\341z\344?\247\t]\306\216H\250?\026_\361\025_\361\265?\000\000\000\000\000\000\000\000L\364w\262Z\336\310?9\367\331\005\304\246\322?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\2524\344\334g\027\260?\000\000\000\000\000\000\000\000\215\021L\364w\262\332?\000\000\000\000\000\000\000\000z\024\256G\341z\304?\202\211\376NV\313\313?z\024\256G\341z\304?a\331\213\346\304\335\276?\222$I\222$I\322?\035\324A\035\324A\255?\2524\344\334g\027\300?.o\214`\242\277\323?\207Y\352]\375Z\333?P\304c\301\001n\270?\000\000\000\000\000\000\000\000\222$I\222$I\342?\333\266m\333\266m\313?\026_\361\025_\361\265?\035\324A\035\324A\335?\026_\361\025_\361\305?\035\324A\035\324A\335?\000\000\000\000\000\000\000\000\333\266m\333\266m\333?\026_\361\025_\361\245?\324\376\013E<\026\334?\222$I\222$I\342?\261\2514\344\334g\207?\2524\344\334g\027\260?_\361\025_\361\025\337?5\344\334g\027\020\333?\035\324A\035\324A\255?\010\357-\351iB\267?\035\324A\035\324A\315?\222$I\222$I\302?\347>\273\200\330T\312?\310\271\317. 6\325?\340\311jyc\004\323?\026_\361\025_\361\265?7\017d~\360\336\302?P\007uP\007u\320?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\367\331\005\304\246\322\320?.o\214`\242\277\343?\261\2514\344\334g\227?\222$I\222$I\262?z\024\256G\341z\264?\222$I\222$I\342?\370\212\257\370\212\257\330?\000\000\000\000\000\000\000\000D\177\'\253\345\215\321?9\367\331\005\304\246\322?\310\271\317. 6\305?\035\324A\035\324A\315?\272I\014\002+\207\306?\000\000\000\000\000\000\000\000i\310\271\317. \346?\021\217\005\007\270a\306?\310\271\317. 6\325?y,8\300\r\263\324?\270\036\205\353Q\270\316?X|\305W|\305\327?\324A\035\324A\035\324?\324A\035\324A\035\324?\354Q\270\036\205\353\341?\000\000\000\000\000\000\000\000\t\343\350\254S&\327?\245!\347>\273\200\330?\000\000\000\000\000\000\000\000P\007uP\007u\320?\222$I\222$I\342?X|\305W|\305\327?_\361\025_\361\025\357?y,8\300\r\263\324?\370\212\257\370\212\257\330?L\364w\262Z\336\270?\035\324A\035\324A\235?z\024\256G\341z\304?\202\211\376NV\313\313?\270\036\205\353Q\270\336?z\024\256G\341z\304?\022L\364w\262Z\336?\035\324A\035\324A\255?\222$I\222$I\302?\000\000\000\000\000\000\000\000\230\350\357d\265\274\341?\324A\035\324A\035\344?\267m\333\266m\333\326?\261\2514\344\334g\327?\222$I\222$I\322?\324A\035\324A\035\324?\247\t]\306\216H\270?P\007uP\007u\320?\2524\344\334g\027\320?\026_\361\025_\361\325?\222$I\222$I\322?P\007uP\007u\340?\"\347>\273\200\330\324?\000\000\000\000\000\000\000\000\324A\035\324A\035\324?\347>\273\200\330T\312?\2524\344\334g\027\300?\000\000\000\000\000\000\000\000\376NV\313\033#\330?\361\025_\361\025_\321?\231\231\231\231\231\231\271?\247\t]\306\216H\270?\261\2514\344\334g\347?\376NV\313\033#\310?z\024\256G\341z\304?\347>\273\200\330T\272?D\177\'\253\345\215\301?z\024\256G\341z\304?\347>\273\200\330T\272?\222$I\222$I\342?\310\271\317. 6\305?5\344\334g\027\020\313?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\177\'\253\345\215\321?D\177\'\253\345\215\241?\206\234\373\354\002b\323?\222$I\222$I\262?\202\211\376NV\313\313?\276\342+\276\342+\336?\310\271\317. 6\325?_4\'\356\366\034\307?\000\000\000\000\000\000\000\000\202\211\376NV\313\273?2?xoIO\243?\333\266m\333\266m\333?\347>\273\200\330T\332?z\024\256G\341z\304?\n\327\243p=\n\327?\000\000\000\000\000\000\000\000\324A\035\324A\035\324?\222$I\222$I\322?\222$I\222$I\322?\365\361\217<\323\n\301?\026_\361\025_\361\305?X|\305W|\305\347?\222$I\222$I\342?\222$I\222$I\302?\324A\035\324A\035\324?\026_\361\025_\361\345?\202\211\376NV\313\313?\347>\273\200\330T\272?\035\324A\035\324A\235?\000\000\000\000\000\000\000\000\267m\333\266m\333\346?\324A\035\324A\035\324?\000\000\000\000\000\000\000\000\026_\361\025_\361\325?\035\324A\035\324A\255?D\177\'\253\345\215\321?\317. 6\225\206\314?\000\000\000\000\000\000\000\000\035\324A\035\324A\255?\000\000\000\000\000\000\000\000\035\324A\035\324A\275?\231\231\231\231\231\231\331?\215\021L\364w\262\332?\000\000\000\000\000\000\000\000\324A\035\324A\035\324?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\324A\035\324A\315?\205\250@)\031~\343?D\177\'\253\345\215\321?\000\000\000\000\000\000\000\000D\177\'\253\345\215\321?\026_\361\025_\361\265?\272I\014\002+\207\306?\035\324A\035\324A\275?\000\000\000\000\000\000\000\000P\007uP\007u\300?P\007uP\007u\320?\245!\347>\273\200\330?\000\000\000\000\000\000\000\000\026_\361\025_\361\265?_4\'\356\366\034\307?z\024\256G\341z\304?\347>\273\200\330T\312?\261\2514\344\334g\307?\222$I\222$I\342?\000\000\000\000\000\000\000\000\035\324A\035\324A\235?\324A\035\324A\035\344?\000\000\000\000\000\000\000\000\267m\333\266m\333\326?\231\231\231\231\231\231\311?\270\036\205\353Q\270\276?X|\305W|\305\327?\000\000\000\000\000\000\000\000:\250\203:\250\203\332?\035\324A\035\324A\315?z\024\256G\341z\304?\310\271\317. 6\325?\222$I\222$I\302?\n\327\243p=\n\327?\333\266m\333\266m\353?\035\324A\035\324A\235?\000\000\000\000\000\000\000\000D\213l\347\373\251\321?\310\271\317. 6\325?\310\271\317. 6\325?\035\324A\035\324A\335?_\361\025_\361\025\337?z\024\256G\341z\244?\035\324A\035\324A\315?\026_\361\025_\361\305?\361\025_\361\025_\321?\367\331\005\304\246\322\300?X|\305W|\305\327?\n\327\243p=\n\327?\261\2514\344\334g\327?\035\324A\035\324A\315?\231\231\231\231\231\231\311?\026_\361\025_\361\345?\347>\273\200\330T\272?L\364w\262Z\336\330?c\004\023\375\235\254\306?\222$I\222$I\322?\026_\361\025_\361\265?_4\'\356\366\034\307?\n\327\243p=\n\327?\247\t]\306\216H\270?\035\324A\035\324A\315?\231\231\231\231\231\231\331?\035\324A\035\324A\275?\244p=\n\327\243\340?\035\324A\035\324A\255?\035\324A\035\324A\275?\000\000\000\000\000\000\000\000\035\324A\035\324A\275?\035\324A\035\324A\275?\000\000\000\000\000\000\000\000\261\2514\344\334g\307?\333\266m\333\266m\353?X|\305W|\305\327?\344\231V\210\n\224\342?\324A\035\324A\035\344?\324A\035\324A\035\324?\000\000\000\000\000\000\000\000\231\231\231\231\231\231\271?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\013\016p\303,\325?\000\000\000\000\000\000\000\000z\024\256G\341z\304?\222$I\222$I\302?\2741\202\211\376N\326?D\177\'\253\345\215\261?\231\231\231\231\231\231\331?\310\271\317. 6\325?D\177\'\253\345\215\321?\000\000\000\000\000\000\000\000\347>\273\200\330T\272?\231\231\231\231\231\231\331?\231\231\231\231\231\231\331?z\024\256G\341z\244?\3569.\246X\263\321?D\177\'\253\345\215\321?$I\222$I\222\344?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 704
          }
        }
        tensor_content: "\257\215X\227\036\363\327?}\016\251\t\306[\271?\001\241\344N\321\302\311?\241\344N\321\302\031\220?\331\347\220\232`\274\245?\271S\264p\006\204\262?\251\t\306[\331\347\240?\216X\227\036\363\367\312?\251\t\306[\331\347\260?\020J\356\024-\234\321?\3511\177\257\215X\267?\271S\264p\006\204\262?tHM0\336\312\316?\251\t\306[\331\347\300?\225}\016\251\t\306\273?\356\024-\234\001\241\324?\3511\177\257\215X\247?\301x+\373\034R\223?\000\000\000\000\000\000\320?\257\215X\227\036\363\357?!5\301x+\373\334?`\274\225}\016\251\341?=\346\357\265\021\353\322?\314\337k#\326\245\347?\241\344N\321\302\031\220?\020J\356\024-\234\321?\321\302\031\020J\356\264?E\013g@(\271\323?\016\251\t\306[\331\327?\031\020J\356\024-\334?-\234\001\241\344N\301?\000\000\000\000\000\000\360?\321\302\031\020J\356\264?tHM0\336\312\316?\031\020J\356\024-\334?=\346\357\265\021\353\322?\233`\274\225}\016\341?\225}\016\251\t\306\313?\361V\3669\244&\230?\267\262\317!5\301\310?\031\020J\356\024-\334?=\346\357\265\021\353\322?5\301x+\373\034\322?\031\020J\356\024-\314?\311\235\242\2053 \244?\356\024-\234\001\241\324?\3511\177\257\215X\267?!5\301x+\373\334?-\234\001\241\344N\321?Z8\003B\311\235\352?\030oe\237Cj\342?5\301x+\373\034\322?\022\353\322c\376^\333?\031\020J\356\024-\334?\031\020J\356\024-\254?\252\252\252\252\252\252\332?E\013g@(\271\323?\216X\227\036\363\367\332?\226}\016\251\t\306\343?J\356\024-\234\001\321?g@(\271S\264\340?\n\306[\331\347\220\312?\321\302\031\020J\356\354?UUUUUU\265?\031\020J\356\024-\274?\2063 \224\334)\312?\3669\244&\030o\325?3 \224\334)Z\310?\245\307\374\2756b\335?E\013g@(\271\303?\251\t\306[\331\347\320?\036\363\367\332\210u\331?\356\024-\234\001\241\324?J\356\024-\234\001\321??\207\324\004\343\255\354?\313>\207\324\004\343\335?\301x+\373\034R\243?\000\000\000\000\000\000\000\000\214\267\262\317!5\321?\252\252\252\252\252\252\332?\251\t\306[\331\347\300?\207\324\004\343\255\354\323?\027\316\200Pr\247\330?\241\344N\321\302\031\340?-\234\001\241\344N\321?E\013g@(\271\323?\376^\033\261.=\326?\3511\177\257\215X\247?\213\267\262\317!5\351?\321\302\031\020J\356\224?\332\210u\3511\177\337?\371{m\304\272\364\250?6b]z\314\337\353?\031\020J\356\024-\344?=\346\357\265\021\353\262?\306[\331\347\220\232\320?\263\317!5\301x\343?g@(\271S\264\340?@(\271S\264p\356?\241\344N\321\302\031\220?\024-\234\001\241\344\336?\001\241\344N\321\302\251?tHM0\336\312\316?E\013g@(\271\323? \224\334)Z8\343?\241\344N\321\302\031\340?\257\215X\227\036\363\357?+\373\034R\023\214\307?E\013g@(\271\323?\300x+\373\034R\353?=\346\357\265\021\353\302?\361V\3669\244&\230?\031\020J\356\024-\274?=\346\357\265\021\353\342?\031\020J\356\024-\334?\031\020J\356\024-\334?(\271S\264p\006\324?b]z\314\337k\323?\031\020J\356\024-\344?\214\267\262\317!5\321?\342\014\010%w\212\326?)Z8\003B\311\315?\347\220\232`\274\225\355?\2063 \224\334)\312?tHM0\336\312\346?\271S\264p\006\204\322?\337k#\326\245\307\354?#\326\245\307\374\275\326?\3669\244&\030o\325?tHM0\336\312\316?\304\272\364\230\277\327\356?\3669\244&\030o\325?\301x+\373\034R\203?2\177\257\215X\227\256?\023\214\267\262\317!\355?\034\261.=\346\357\305?\271S\264p\006\204\242?\001\241\344N\321\302\211?\242\2053 \224\334\331?\363\367\332\210u\351\321?\301x+\373\034R\303?=\346\357\265\021\353\322?\241\344N\321\302\031\260?HM0\336\312>\357?u\3511\177\257\215\270?\3669\244&\030o\325?\326\245\307\374\2756\352?\235\242\2053 \224\354?\334)Z8\003B\331?\223;E\013g@\330?J\356\024-\234\001\321?J\356\024-\234\001\321?\314\337k#\326\245\357?\332\210u\3511\177\337?\245\307\374\2756b\315?\001\241\344N\321\302\311?\031\020J\356\024-\334?\235\242\2053 \224\314?\342\014\010%w\212\246?\301x+\373\034R\323?=\346\357\265\021\353\322?3 \224\334)Z\310?\2063 \224\334)\312?\241\344N\321\302\031\340?M0\336\312>\207\304?\363\367\332\210u\351\321?g@(\271S\264\340?\022\353\322c\376^\333?\271S\264p\006\204\242?\n\306[\331\347\220\252? \224\334)Z8\353?\220\232`\274\225}\346?\256\354sHM0\316?\370\332\210u\3511\317?\024-\234\001\241\344\346?\220\232`\274\225}\346?i\202\361V\3669\324?I\356\024-\234\001\351?tHM0\336\312\316?\001\241\344N\321\302\351?\3669\244&\030o\325?\245\307\374\2756b\315?\251\t\306[\331\347\240?\321\302\031\020J\356\224?\n\306[\331\347\220\312?\2063 \224\334)\312?\007%w\212\026\316\350?\034R\023\214\267\262\357?}\016\251\t\306[\271?\347\220\232`\274\225\355?\347\220\232`\274\225\355?\3669\244&\030o\325?\306[\331\347\220\232\340?\241\344N\321\302\031\200?\216X\227\036\363\367\312?\225}\016\251\t\306\273?3 \224\334)Z\310?\000\000\000\000\000\000\340?\241\344N\321\302\031\220?\023\214\267\262\317!\305?\000\000\000\000\000\000\340?E\013g@(\271\303?\001\241\344N\321\302Y?=\346\357\265\021\353\302?\354sHM0\336\332?\013g@(\271S\304?\3669\244&\030o\325?\001\241\344N\321\302\311?*\373\034R\023\214\357?\000\000\000\000\000\000\360?J\356\024-\234\001\321?\354sHM0\336\332?\000\000\000\000\000\000\000\000%w\212\026\316\200\320?=\346\357\265\021\353\322?\031\020J\356\024-\334?\360\265\021\353\322c\316?\214\267\262\317!5\321?\271S\264p\006\204\322?z\314\337k#\326\325?\022\353\322c\376^\313?\016\251\t\306[\331\357?\022\353\322c\376^\333?\250h\341\014\010%\357?i\202\361V\3669\324?\031\020J\356\024-\334?2\177\257\215X\227\256?:\244&\030oe\257?\001\241\344N\321\302y?\022\353\322c\376^\313?r\247h\341\014\010\325?=\346\357\265\021\353\262?\2766b]z\314\277?G\254K\217\371{\335?\327F\254K\217\371\333?\007%w\212\026\316\350?\000\000\000\000\000\000\320?\363\367\332\210u\351\321?\343\255\354sHM\300?\223;E\013g@\330?\332\210u\3511\177\337?\331\347\220\232`\274\265?\2766b]z\314\277?\242\2053 \224\334\341?.=\346\357\265\021\353?2\177\257\215X\227\256?\2063 \224\334)\312?Y\227\036\363\367\332\330?6b]z\314\337\353?\371{m\304\272\364\250?\370\332\210u\3511\337?\334)Z8\003B\331?\235\242\2053 \224\274?\342\014\010%w\212\266?\031\020J\356\024-\334?\242\2053 \224\334\351?\001\241\344N\321\302\211?\256\354sHM0\346?\246\307\374\2756b\345?\321\302\031\020J\356\264?\223;E\013g@\330?\327F\254K\217\371\333?\000\000\000\000\000\000\360?\001\241\344N\321\302i?\251\t\306[\331\347\320?!5\301x+\373\254?=\346\357\265\021\353\322?\022\353\322c\376^\313?d\376^\033\261.\345?\027\316\200Pr\247\330?\331\347\220\232`\274\265?\220\232`\274\225}\346?\031\020J\356\024-\334?\261.=\346\357\265\301?\321\302\031\020J\356\224?\216X\227\036\363\367\312?\301x+\373\034R\223?\233`\274\225}\016\331?\376^\033\261.=\326?\207\324\004\343\255\354\303?\336\312>\207\324\004\343?\241\344N\321\302\031\300?}\016\251\t\306[\311?\331\347\220\232`\274\245?2\177\257\215X\227\276?E\013g@(\271\323?\334)Z8\003B\331?\001\241\344N\321\302i?e\237Cj\202\361\326?\363\367\332\210u\351\321?\000\000\000\000\000\000\000\000\253K\217\371{m\324?\3659\244&\030o\355?\356\024-\234\001\241\324?E\013g@(\271\323?+\373\034R\023\214\307?h\341\014\010%w\332?\322c\376^\033\261\336?\000\000\000\000\000\000\000\000=\346\357\265\021\353\262?\024-\234\001\241\344\346??\207\324\004\343\255\354?\235\242\2053 \224\274?\242\2053 \224\334\331?\241\344N\321\302\031\350?J\356\024-\234\001\321?E\013g@(\271\303?\3511\177\257\215X\247?:\244&\030oe\277?\343\255\354sHM\340?\2766b]z\314\337?\247h\341\014\010%\327?2\177\257\215X\227\256?\337k#\326\245\307\354?\001\241\344N\321\302\211?\326\245\307\374\2756\342?\3669\244&\030o\345?m\304\272\364\230\277\267?\022\353\322c\376^\233?\332\210u\3511\177\337?\207\324\004\343\255\354\303?c\376^\033\261.\355?\356\024-\234\001\241\324?J\356\024-\234\001\321?\001\241\344N\321\302i?\216X\227\036\363\367\312?^z\314\337k#\326?\253K\217\371{m\324?2\177\257\215X\227\236?\177\257\215X\227\036\343?|m\304\272\364\230\317?E\013g@(\271\323?\342\014\010%w\212\266? \224\334)Z8\343?=\346\357\265\021\353\322?)Z8\003B\311\315?\261.=\346\357\265\261?\376^\033\261.=\326?HM0\336\312>\357?^z\314\337k#\266?\3511\177\257\215X\267?\271S\264p\006\204\322?\001\241\344N\321\302\311?z\314\337k#\326\355?\241\344N\321\302\031\340?\022\353\322c\376^\333?\301x+\373\034R\263?M0\336\312>\207\304?\225}\016\251\t\306\273?\241\344N\321\302\031\260?\242\2053 \224\334\341?\223;E\013g@\330?\n\306[\331\347\220\312?*\373\034R\023\214\357?d\376^\033\261.\345?\274\225}\016\251\t\326?\354sHM0\336\332?\023\214\267\262\317!\305?\001\241\344N\321\302\211?\370\332\210u\3511\337?\220\232`\274\225}\346?\001\241\344N\321\302\311?\332\210u\3511\177\337?\247h\341\014\010%\327?\216X\227\036\363\367\272?\2766b]z\314\277?!5\301x+\373\274?2\177\257\215X\227\256?\321\302\031\020J\356\304?\225}\016\251\t\306\313?\001\241\344N\321\302y?\227\036\363\367\332\210\355?\331\347\220\232`\274\245?<E\013g@(\341?\031\020J\356\024-\274?\343\255\354sHM\340?*\373\034R\023\214\357?\235\242\2053 \224\314?\3659\244&\030o\355?\301x+\373\034R\203?\271S\264p\006\204\262?\031\020J\356\024-\314?\256\354sHM0\276?tHM0\336\312\316?\223;E\013g@\330?\023\214\267\262\317!\305?\031\020J\356\024-\334?tHM0\336\312\356?m\304\272\364\230\277\267?\214\267\262\317!5\321?\241\344N\321\302\031\220?E\013g@(\271\323?\031\020J\356\024-\334?z\314\337k#\326\355?\001\241\344N\321\302\211?\003B\311\235\242\205\323?|m\304\272\364\230\317?\001\241\344N\321\302\211?\n\306[\331\347\220\252?=\346\357\265\021\353\262?\322c\376^\033\261\336?\251\t\306[\331\347\260?2\177\257\215X\227\256?\245\307\374\2756b\315?\301x+\373\034R\203?\301x+\373\034R\263?\034\261.=\346\357\305?\342\014\010%w\212\206?\267\262\317!5\301\340?\343\255\354sHM\300?\344N\321\302\031\020\342?\301x+\373\034R\303?%w\212\026\316\200\300?\225}\016\251\t\306\273?2\177\257\215X\227\346?\031\020J\356\024-\334?\331\347\220\232`\274\265?\247h\341\014\010%\347?\363\367\332\210u\351\321?\363\367\332\210u\351\321?\321\302\031\020J\356\304?l#\326\245\307\374\345?\023\214\267\262\317!\355?\344N\321\302\031\020\342?\373\034R\023\214\267\322?\301x+\373\034R\223?!5\301x+\373\334?\261.=\346\357\265\261?\216X\227\036\363\367\272?\016\251\t\306[\331\357?\331\347\220\232`\274\265?z\314\337k#\326\355?\251\t\306[\331\347\320?\216X\227\036\363\367\332?\247h\341\014\010%\327?\031\020J\356\024-\274?#\326\245\307\374\275\306?u\3511\177\257\215\270?\256\354sHM0\276?h\341\014\010%w\332?5\301x+\373\034\302?m\304\272\364\230\277\327?5\301x+\373\034\322?\2053 \224\334)\342?m\304\272\364\230\277\267?\n\306[\331\347\220\252?}\016\251\t\306[\311?\360\265\021\353\322c\316?\234\001\241\344N\321\342?=\346\357\265\021\353\342?\235\242\2053 \224\274?\022\353\322c\376^\233?\235\242\2053 \224\274?\356\024-\234\001\241\324?\000\000\000\000\000\000\320?\3669\244&\030o\325?\230\277\327F\254K\337?\227\036\363\367\332\210\345?\251\t\306[\331\347\260?=\346\357\265\021\353\302?.=\346\357\265\021\343?\001\241\344N\321\302\211?\220\232`\274\225}\336?\271S\264p\006\204\302?\027\316\200Pr\247\330?\257\215X\227\036\363\327?=\346\357\265\021\353\322?8\003B\311\235\242\345?\332\210u\3511\177\337?\211u\3511\177\257\335?\214\267\262\317!5\321?\022\353\322c\376^\333?5\301x+\373\034\322?\n\306[\331\347\220\252?[\331\347\220\232`\344?\256\354sHM0\276?\234\001\241\344N\321\322?m\304\272\364\230\277\267?}\016\251\t\306[\271?\331\347\220\232`\274\245?\031\020J\356\024-\334?!5\301x+\373\274?\311\235\242\2053 \244?\2063 \224\334)\272?\301x+\373\034R\203?\241\344N\321\302\031\300?\271S\264p\006\204\262?\2063 \224\334)\272?=\346\357\265\021\353\322?\301x+\373\034R\203?!5\301x+\373\314?\334)Z8\003B\331?M0\336\312>\207\264?J\356\024-\234\001\321?)Z8\003B\311\315?2\177\257\215X\227\346?\031\020J\356\024-\334?2\177\257\215X\227\256?=\346\357\265\021\353\302?\216X\227\036\363\367\272?\003B\311\235\242\205\323?\001\241\344N\321\302y?\031\020J\356\024-\334?m\304\272\364\230\277\267?\2063 \224\334)\272?\376^\033\261.=\326?\235\242\2053 \224\274?w\212\026\316\200P\322?\3511\177\257\215X\247?\207\324\004\343\255\354\323?L\217\371{m\304\332?\2766b]z\314\277?\266\021\353\322c\376\276?\223;E\013g@\330?\301x+\373\034R\323?=\346\357\265\021\353\322?\031\020J\356\024-\334?\241\344N\321\302\031\220?\321\302\031\020J\356\264?\370\332\210u\3511\317?\356\024-\234\001\241\324?\245\307\374\2756b\315?\000\000\000\000\000\000\000\000\001\241\344N\321\302i?2\177\257\215X\227\236?\3511\177\257\215X\247?\251\t\306[\331\347\300?\251\t\306[\331\347\260?!5\301x+\373\274?\261.=\346\357\265\261?3 \224\334)Z\310?\001\241\344N\321\302\211?\034\261.=\346\357\305?\326\245\307\374\2756\352?T\264p\006\204\222\333?\3511\177\257\215X\267?J\356\024-\234\001\341?\022\353\322c\376^\313?z\314\337k#\326\355?\2063 \224\334)\312?\343\255\354sHM\340?\235\242\2053 \224\274?\241\344N\321\302\031\260?\261.=\346\357\265\261?\321\302\031\020J\356\224?\007%w\212\026\316\350?\257\215X\227\036\363\307?T\264p\006\204\222\333?\240Cj\202\361V\306?m\304\272\364\230\277\267?\343\255\354sHM\320?;E\013g@(\311?\031\020J\356\024-\254?\245\307\374\2756b\335?=\346\357\265\021\353\322?=\346\357\265\021\353\322?\261.=\346\357\265\261?\031\020J\356\024-\334?\000\000\000\000\000\000\360?!5\301x+\373\274?\371{m\304\272\364\250?\261.=\346\357\265\301?\271S\264p\006\204\262?\001\241\344N\321\302\311?\311\235\242\2053 \264?}\016\251\t\306[\271?\203\222;E\013g\350?\311\235\242\2053 \264?\240Cj\202\361V\306?\271S\264p\006\204\322?\245\307\374\2756b\315?\3659\244&\030o\355?k#\326\245\307\374\355?\211u\3511\177\257\335?\226}\016\251\t\306\343?2\177\257\215X\227\356?\031\020J\356\024-\254?\031\020J\356\024-\334?\256\354sHM0\316?\301x+\373\034R\323?\223;E\013g@\330?5\301x+\373\034\322?\2063 \224\334)\272?=\346\357\265\021\353\322?M0\336\312>\207\304?)Z8\003B\311\315?\301x+\373\034R\343?\375\2756b]z\354?\370\332\210u\3511\317?\235\242\2053 \224\274?M0\336\312>\207\344?\301x+\373\034R\203?\022\353\322c\376^\313?\254K\217\371{m\354?*\373\034R\023\214\357?~\016\251\t\306[\341?\347\220\232`\274\225\355?\256\354sHM0\316?\301x+\373\034R\323?\370\332\210u\3511\337?2\177\257\215X\227\256?\031\020J\356\024-\334?\023\214\267\262\317!\355?\3669\244&\030o\325?\261.=\346\357\265\261?\321\302\031\020J\356\264?\311\235\242\2053 \264?\257\215X\227\036\363\327?\3511\177\257\215X\267?\320!5\301x+\333?\311\235\242\2053 \264?B\311\235\242\2053\320?\010%w\212\026\316\320?\001\241\344N\321\302Y?\334)Z8\003B\331?\211u\3511\177\257\335?\371{m\304\272\364\340?u\3511\177\257\215\310?\311\235\242\2053 \264?=\346\357\265\021\353\322?\3511\177\257\215X\267?\370\332\210u\3511\317?\031\020J\356\024-\254?\024-\234\001\241\344\346?+\373\034R\023\214\307?=\346\357\265\021\353\322?\000\000\000\000\000\000\360?\361V\3669\244&\230?\257\215X\227\036\363\307?\270S\264p\006\204\352?\245\307\374\2756b\335?z\314\337k#\326\355?\n\306[\331\347\220\252?!5\301x+\373\314?\261.=\346\357\265\321?\010%w\212\026\316\320?E\013g@(\271\323?\353\322c\376^\033\351?\264p\006\204\222;\325?\257\215X\227\036\363\307?\356\024-\234\001\241\324?\n\306[\331\347\220\252?T\264p\006\204\222\333?\314\337k#\326\245\357?\376^\033\261.=\326?E\013g@(\271\303?=\346\357\265\021\353\322?\233`\274\225}\016\331?\306[\331\347\220\232\340?\001\241\344N\321\302Y?!5\301x+\373\274?\022\353\322c\376^\233?tHM0\336\312\316?\001\241\344N\321\302y?\245\307\374\2756b\315?\301x+\373\034R\223?T\264p\006\204\222\333?+\373\034R\023\214\307?\257\215X\227\036\363\307?u\3511\177\257\215\270?\370\332\210u\3511\337?\n\306[\331\347\220\252?\3511\177\257\215X\267?\370\332\210u\3511\317?}\016\251\t\306[\271?\235\242\2053 \224\314?\217\371{m\304\272\354?\370\332\210u\3511\317?\257\215X\227\036\363\307?\261.=\346\357\265\261?\216X\227\036\363\367\332?\250h\341\014\010%\357?\240Cj\202\361V\326?\204\222;E\013g\320?\371{m\304\272\364\340?Y\227\036\363\367\332\330?V\3669\244&\030\337?=\346\357\265\021\353\322?\271S\264p\006\204\242?5\301x+\373\034\322?\256\354sHM0\316?\356\024-\234\001\241\324?!5\301x+\373\254?#\326\245\307\374\275\326?\225}\016\251\t\306\273?\031\020J\356\024-\344?\225}\016\251\t\306\273?\203\222;E\013g\350?\244&\030oe\237\323?\363\367\332\210u\351\351?\204\222;E\013g\320?\3669\244&\030o\325?\235\242\2053 \224\334?\000\000\000\000\000\000\320?8\003B\311\235\242\345?-\234\001\241\344N\301?HM0\336\312>\357?\3511\177\257\215X\267?\364\230\277\327F\254\353?\024-\234\001\241\344\346?\334)Z8\003B\331?\241\344N\321\302\031\200?-\234\001\241\344N\321?\231\277\327F\254K\347?"
      }
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 704
          }
        }
        tensor_content: "\340t\375#\251&\320?g-\327\264\032\006\240?\353<\025\255\373\211\277?Sc\017\263\200|\321?\367\375O\207\270\331\340?\277^\203\343_f\227?a\324\302\324c;\301?\212\300\016\374*\206\345?\362\244;\247\001\017\262?\026\014\225\\H\363\343?\276\006\307\277\314.\340?\277^\203\343_f\227?\200\016\346;\275\360\327?\316\3176\005C%\307?gY\265F\344\241\343?\245;\247\001\017\022\272?B\343IwN\003\236?\000\026\357\310\344\315\241?\354\tZl\234\332\335?<2ys\004\001\330?\240W\033\275e`\322?\277^\203\343_f\307?{\202\026\033\247v\327?\312\233#\010\300\342\315?e\223M6\331d\323?\257SFC;\006\313?\245\260/\235\034+\261??$\277\025\331\331\333?\203\000,\336\221\311\313?%vk\317\225\236\325?y\350\214\234e\325\272?\250\242u?\361\003\325?YG\233\367).\331?I<^W\005\316\314?n6d\334\367?\315?QT\375\2301\302\315?s7\274\230\033\323\324?\307\334\230\246J\271\273?!\352\233\256\177$\325?ni\037\035W\357\336?\363q\200f\242_\340?\232\376\006\335\256\225\303?\223\013i~\266)\330?\\{\256\364\254p\302?\\\006&Y\237W\273?\t\271\005o\003\251\313?\353<\025\255\373\211\257?d\371\303\267\227\303\306?\027\005\270\255\262\337\265?\254a\000\241f-\327?\326\273\367\264\245}\344?\270\340m u\023\303?B\343IwN\003\316?%\001\3433\210\205\316?x\303\213\2711M\305?\274\367\264\245}t\334?\310v\"%\214Z\330?-i\t.\216\n\301?\031\237A,\364\200\342?5\264c\260\031\256\323?%vk\317\225\236\305?\256\310\316\336H\037\342?k\252\224\273\341\305\334?\363/\263\013\364\365\232?\023\321\244\260/\235\314?\023F-L=\266\323?\266\321[\006&Y\317?1\365\330N\244\204\321?\321\003J\002\306g\340?\321\216\301f\270N\311?M\n\373\322\311\261\322?\0227\0332\356\373\317?EJ\030\2650\365\330?\262\207Y@\276H\304?\005\242\276\351\372G\342?\203u\264y\237\342\302?\305\267\227\303\0261\306?\023\321\244\260/\235\274?\214Z\230zl\'\322?\305\204\334\202\267\201\324?\010\037|\360\301\007\277?\321\301|\247\027\376\352?\325\356\262\365\004-\346?3\032\3321\330\014\347?\027\005\270\255\262\337\265?4r\226UkD\316?0\263\013\364\365\032\274?\016\355\030l\206\353\304?\230\357\364\302_\333\317?\021\254\243\315\373\024\307?\334\024\014\225\\H\343?+\317\177\257Li\304?\314\2525\"\017\235\321?$}H~+\262\343?.\301\305Q!B\330?\263T\236\377^\231\322?A\276H\224\032{\330?\232\376\006\335\256\225\343?Z@\276H\224\032\353?o\253\354w\005Yt?<\323\337\240\333\265\342?\024\340\266\312~W\300?n\177\016\346;\275\340?4r\226UkD\316?\326ML\310-x\333?\323\263\302I\354\326\336?\377O\207\270\331\220\341?\035+\021M\n\373\322?7\014 \324\254\345\332?\351\270z\367\236\266\344?M\225r7\274\230\313?\001\241f-\327\264\332?\000\026\357\310\344\315\241??$\277\025\331\331\333?\n.\216\n\021\302\342?n6d\334\367?\315?\r\301:\332\274O\341?[l\234\332]\266\316?\273\237\370\201\352<\325?\325\217\031#\334\341\320?\233\211~A\241|\274?\226\312\363\337+S\332?\031l\206\353\224\321\340?\035\351C\362[\221\335?I<^W\005\316\314?;e4\264c\260\311?\221\346g\233\202\241\342?\213\030\313\037\276\275\274?\000I\252\tD}\323?\322\374lS0T\342?\000I\252\tD}\323?v\201\276^\203\343\337?\240W\033\275e`\342?E}\323\365\217\244\332?~\351\344X\211h\322?\207\001\204\232\265\\\323?U\210\020\226\264\004\267?\3433\210\205\036P\302?\024\340\266\312~W\300?D\362[\221\235\275\321?g\270N\031\r\355\270?\276\006\307\277\314.\340?\"BX\322\022\\\274?N\310-x\033H\335?\302\035\016E\325\217\271?\021\254\243\315\373\024\307?VUUUUU\325?M\225r7\274\230\333?\346\3064U\312\335\340?\303\352R\004v\340\327?>\314\002\362E\242\324?\254.E`\007~\265?h&\372\005\205\362\341?\300+\310\242\000\267\325?\332\033\351C\362[\321?\366c\306\010w8\304?.\216\n\021\302\222\306?U\210\020\226\264\004\307?\233\211~A\241|\214?\036\370U\014\253K\301?\010\037|\360\301\007\317?\204\315p\2352\032\332?\312\233#\010\300\342\335?\256\310\316\336H\037\322?\371\"Qj\354a\306?\353\261\235H\t\243\266?\232\376\006\335\256\225\343?B\343IwN\003\316?\374\274\332\350-\003\323?\"BX\322\022\\\274?\225\004\214\317 \026\352?\336e\353\tZl\314?\312\020\254\243\315\373\324?\234\230\220[\3606\300?\301\203\204\306\223\356\314?\336e\353\tZl\314?\253\224\273\341\305\334\310?C\026\005\270\255\262\337?\344\213D\251\261\207\331?X\274#\2237G\320?6N\355.[O\320?\325\302\324c;\221\262?\214Z\230zl\'\322?\241|\034\240\231\350\267?\3433\210\205\036P\342?JKpqT\210\260?\266\321[\006&Y\317?%\001\3433\210\205\336?\325\302\324c;\221\262?Go\031\230d}\356? \035W\357\336\323\326?\332\246`\250\344B\312?\367\375O\207\270\331\320?\361\253\030V\227\"\340?pEv\366F\372\320??\231G\261\346\362\262?\204\315p\2352\032\332?\215\'\3359\rx\320?\334@\352&&\344\306?f\036\305\232\313K\314?pEv\366F\372\340?\321\216\301f\270N\311?0(\224\217\0034\263?M\n\373\322\311\261\302?pEv\366F\372\300?Go\031\230d}\336?kw\331z\202\026\273?\233\211~A\241|\314?\346\371\357\225)\215\342?\366c\306\010w8\324?\254.E`\007~\265?\2250ja\352\261\315?\374\024\227\014\301:\332?\347\362\022\347\223y\324?\262\207Y@\276H\324?\270k\345\204g\372\313?=\377\2752\245Q\306?1\365\330N\244\204\321?\340\377t\210\233\r\311?\3145\255\206\001\204\312?\353\261\235H\t\243\306?rjw\331z\202\326?\364\311<\2125\227\327?5\264c\260\031\256\323?\230d}^m\364\306?T\356\206\027sc\332?\251o\272\376\221T\223?E\277\240P>\016\320?\'\233l\262\311&\333?\036\370U\014\253K\261? \035W\357\336\323\306?\035+\021M\n\373\322?\265y\237\342\222!\330?\354\326\236+=+\314?\351\214\234e\325\032\321?r\013\336\006R7\341?\366c\306\010w8\264?\032\304B\017(\t\310?\33720\311\372\274\332?\037P\0220>\203\330?.\301\305Q!B\330?\001\241f-\327\264\312?\265y\237\342\222!\330?.\216\n\021\302\222\306?\351\214\234e\325\032\321?4r\226UkD\276?n6d\334\367?\275?\002;\360\253\030V\307?\314\2525\"\017\235\321?\032\304B\017(\t\330?\223\013i~\266)\330?z*Z\367\023?\320?\203B\3718@3\321?\214\215S\273\313\326\263?\245\260/\235\034+\341?\024\340\266\312~W\320?\321\003J\002\306g\300?t\217x\274\256\n\314?\257SFC;\006\313?\020\022\032O\272s\232?>\2125\227\2278\317?\240W\033\275e`\322?\366c\306\010w8\324?H\261\346\362\022\347\343?4\347\036\361x]\265?\273\237\370\201\352<\345?\027\005\270\255\262\337\325?\277^\203\343_f\327?\275\304\371d\036\305\312?\374\211\037\250\316S\321?rjw\331z\202\306?\220\327U\2013\347\336?n6d\334\367?\315?M\225r7\274\230\333?\266\321[\006&Y\317?\273\237\370\201\352<\305?\360\n\262(\300m\305?\265y\237\342\222!\330?\230\357\364\302_\333\317?\215\'\3359\rx\300?\342:e4\264c\340?o\253\354w\005Y\244?\241|\034\240\231\350\307?\257\225\023\236\351o\320?\017\207\242\352\307\214\301?v)\002;\360\253\330?\230\357\364\302_\333\317?\027\220/\022\245\306\276?\316\3176\005C%\327?\304B\017(\t\030\337?\000\000\000\000\000\000\000\000\204;\034\212\252\037\343?\263T\236\377^\231\322?\367\210\307\353\252\300\311?YG\233\367).\311?0[O\320b\343\324?\177\266)\030*\271\300?\317\'\363(\326\\\336?\222\022F-L=\346?s\365\356=mi\277?\0342\356\373\237\016\341?\263T\236\377^\231\342?\362\244;\247\001\017\242?0[O\320b\343\324?\322/(\224\217\003\344?\254.E`\007~\265??\231G\261\346\362\302?\020\337^\016[\304\330?\374\274\332\350-\003\323?y]\0258s\356\321?\310v\"%\214Z\330?n6d\334\367?\275?{\202\026\033\247v\327?j\354a\026\220/\322?`\305\260\272\024\201\255?U\210\020\226\264\004\307?\262\022\321\244\260/\355?\2321\302\035\016E\325?a3\\\247\214\206\346?\016\355\030l\206\353\304?\332N\244\204Q\013\323?\\{\256\364\254p\322?\301\203\204\306\223\356\314?[\202\213\243B\204\340?\204\232\265\\\323j\330?\226\312\363\337+S\312?\270k\345\204g\372\273?\\9\341\231\376\006\335?\027\322\374lS0\324?\223\013i~\266)\310?\013\373\322\311\261\022\321?\305\267\227\303\0261\346?;\332\274Oq\311\340?\326ML\310-x\333?\254.E`\007~\305?\306Q!BX\322\262?\360\225)\215\262T\316?:\230\357\364\302_\333?\007\233\341:e4\344?.\216\n\021\302\222\306?-\364\200\222\200\361\311?\204\232\265\\\323j\310?\373GRM \352\333?\244\343\352\335{\332\322?\023\321\244\260/\235\314?kw\331z\202\026\333?\226\375\256 \213\002\334?\330\201_\305\260\272\324?W\255\021y\350\214\314?\000\007\335\256\225\023\316?.\216\n\021\302\222\306?\225\004\214\317 \026\352?BX\322\022\\\034\305?\346%\316\'\363(\326?A\222j\002Q\337\344?\240\342\222!XG\313?\336\230\246J\271\033\336?L\021\330\201_\305\340?\321\003J\002\306g\320?\023F-L=\266\303?\221\346g\233\202\241\342?\373GRM \352\333?\301\266?\007\363\235\336?T\356\206\027sc\332?\027\220/\022\245\306\276?\215\'\3359\rx\300?\3433\210\205\036P\242?\232\376\006\335\256\225\263?;\332\274Oq\311\300?\016\355\030l\206\353\324?N\327?\222j\002\341?\346\371\357\225)\215\342?B\213\215S\273\313\326?t\217x\274\256\n\314?\000\026\357\310\344\315\241?`:9V\"\232\304?\246\334\r/\346\306\344?\341$vk\317\225\336?\034^\314\215i\252\344??\231G\261\346\362\322?\000\007\335\256\225\023\336?\270k\345\204g\372\273?\372\303\267\227\303\026\341?\356\030l\206\353\224\321?\375\202B\3718@\343?\245;\247\001\017\022\272?|O[\332G\307\345?\"\267\340m u\323?P\374@u\236\212\326?(h\261qjw\331?\202f\242_P(\317?\321\216\301f\270N\331?\363q\200f\242_\340?\034\034\3772\273@\337?`\305\260\272\024\201\235?s\365\356=mi\317?\336\332s\245g\205\303?\232\376\006\335\256\225\303?j\354a\026\220/\262?\313\335\360bnL\323?\317\'\363(\326\\\336?\325\302\324c;\221\302??$\277\025\331\331\313?7\014 \324\254\345\332?\032\304B\017(\t\330?\014S\217\355DJ\330?\240\342\222!XG\313?\nZl\234\332]\346?\377{eJ\243,\305?\347\362\022\347\223y\264?\0105k\271\246\325\340?\"BX\322\022\\\314?Q\311\2054?\333\244??\231G\261\346\362\262?4\347\036\361x]\325?\334@\352&&\344\306?;e4\264c\260\311?\177\266)\030*\271\320?\366\356=mi\037\315?\251o\272\376\221T\323?#Qj\354a\026\340?\262\207Y@\276H\324?~\351\344X\211h\322?\367\375O\207\270\331\320?4\347\036\361x]\305?)5\3660\013\310\267?\371\"Qj\354a\346?\340t\375#\251&\260?M\225r7\274\230\273?[\256i5\014 \324?\340\377t\210\233\r\311? \276\275\034\266\210\341?4\347\036\361x]\265?-i\t.\216\n\301?n6d\334\367?\275?\000\026\357\310\344\315\241?\"BX\322\022\\\274?\010\037|\360\301\007\237?\241\257\327\340\370\227\331?\177\266)\030*\271\300?8\246\251R\356\206\307?\232\376\006\335\256\225\323?n6d\334\367?\315?j\354a\026\220/\322?\"\204%-\301\305\321?\264!\343\276\377\351\260?\217L\336\034A\000\306?\261\272\024\201\035\370\325?\337\247\270d\010\326\341??f\214p\207C\321?\362\244;\247\001\017\242?\317=\342\361\272*\340?\"BX\322\022\\\314?.\216\n\021\302\222\306?Go\031\230d}\336?6N\355.[O\320?\231\005\344\213D\251\341?\344\276\377\351\0207\313?YG\233\367).\331?\254.E`\007~\265?\'\020\365M\327?\342?g-\327\264\032\006\340?\243\026\246\036\333\211\304?;e4\264c\260\271?\247v\227\255\'h\341?\304B\017(\t\030\337?\3433\210\205\036P\302?+\234\304n\355\271\322?\311Cg\344,\253\326?\374\211\037\250\316S\321?\325\217\031#\334\341\320?kw\331z\202\026\333?\201\333*\373]A\326?G\027]t\321E\267?d\306\010w8\024\325?\241$`|\006\261\320?)5\3660\013\310\267?B\343IwN\003\236?g-\327\264\032\006\240?\326ML\310-x\213?8\246\251R\356\206\327?\3433\210\205\036P\342?JKpqT\210\240?\223\013i~\266)\270?\325\302\324c;\221\262?\245\260/\235\034+\341?\272\322\263\302I\354\326?JKpqT\210\240?\273\237\370\201\352<\325?\321\003J\002\306g\320?M\225r7\274\230\313?\372\357\225)\215\262\324? \035W\357\336\323\306?\254.E`\007~\265?G\344\2413r\226\345?<2ys\004\001\330?\\\006&Y\237W\333?0(\224\217\0034\323?\024\340\266\312~W\320?B\213\215S\273\313\326?\261\355\317\301|\247\327?\314\2525\"\017\235\321?\301\370\014b\241\007\344?B\343IwN\003\236?\305\267\227\303\0261\326?D\260\2166\357S\334?\362\244;\247\001\017\242?}\034\240\231\350\027\324?\003\251\233\230\220[\340?\363/\263\013\364\365\332?\034\034\3772\273@\357?\305\204\334\202\267\201\324?\241|\034\240\231\350\327?b_:9V\"\312?\027\220/\022\245\306\276?QT\375\2301\302\315?\312\020\254\243\315\373\324?\257SFC;\006\333?BX\322\022\\\034\305?\330?\222j\002Q\337?e\223M6\331d\303?YG\233\367).\311?\000\000\000\000\000\000\000\000\220\327U\2013\347\336?\021M\n\373\322\311\341?\225\245\362\374\367\312\324?U\210\020\226\264\004\327?a\324\302\324c;\321?\317i\300\203\204\306\323?\001\241f-\327\264\272?\214Z\230zl\'\322?\233\211~A\241|\314?P\374@u\236\212\326?\213au)\002;\340?ox17\246\251\342?\005\325y*Z\367\323?\254.E`\007~\305?[\341$vk\317\325?\022\004`\361\216L\336?\201\333*\373]A\306?`:9V\"\232\304?h\205\223\330\255=\327?\363q\200f\242_\320??$\277\025\331\331\273?d\371\303\267\227\303\266?\334\237\203\371N/\354?W\255\021y\350\214\314?\314\2525\"\017\235\321?\031\237A,\364\200\302?\374\274\332\350-\003\303?0\263\013\364\365\032\314?e\223M6\331d\303?\236^\370k\373s\340?\031\237A,\364\200\322?D\362[\221\235\275\321?\241|\034\240\231\350\267?\371\"Qj\354a\226?\223\013i~\266)\330?\010\224\004\214\317 \326?s\004\001X\274#\323?\214\215S\273\313\326\263?QT\375\2301\302\315?\351J\317\n\'\261\333?rjw\331z\202\326?G\027]t\321E\307?g-\327\264\032\006\240?\316\234{\304\343u\325?`\305\260\272\024\201\255?:\230\357\364\302_\333?\213\030\313\037\276\275\334?kw\331z\202\026\313?\272\246\3250\200P\343??\231G\261\346\362\322?WzV8\211\335\332?\000\324!n6d\334?\314\2525\"\017\235\341?-i\t.\216\n\301?\\{\256\364\254p\322?3\032\3321\330\014\347??\231G\261\346\362\342?>\2125\227\2278\317?\212\363\311<\2125\327?l\345\204g\372\033\344?\362\244;\247\001\017\322?y]\0258s\356\301?YG\233\367).\271?\204\232\265\\\323j\310?\005`\361\216L\336\354?\327\264\032\006\020j\326?\362\244;\247\001\017\242?g-\327\264\032\006\340?\363/\263\013\364\365\252?\232\376\006\335\256\225\323?\317\'\363(\326\\\336?&C\260\2166\357\323?f\036\305\232\313K\314?M\n\373\322\311\261\322?\201\333*\373]A\306?\"BX\322\022\\\334?JKpqT\210\340?\251o\272\376\221T\223?T\356\206\027sc\332?~\351\344X\211h\322?kw\331z\202\026\273?\252\3721c\204;\314?\"\204%-\301\305\341?\367\375O\207\270\331\320?4r\226UkD\276?\351\214\234e\325\032\321?\001\241f-\327\264\312?d\371\303\267\227\303\306?\230d}^m\364\306?\273\237\370\201\352<\265?\213\030\313\037\276\275\274?_m\364\226\201I\326?}\332\322>:\256\336?\360\n\262(\300m\305?\036\370U\014\253K\301?G\027]t\321E\307?QT\375\2301\302\315?\210Y@\276H\224\312?xN\003\036$4\316?\236^\370k\373s\340?\301\203\204\306\223\356\314?\273\237\370\201\352<\265?\347\362\022\347\223y\344?\366c\306\010w8\324?o\253\354w\005Y\324?\017x\220\320x\322\315?\235\360L\177\203n\327?\206\277\266?\007\363\335?\244\343\352\335{\332\322?\327\347\325Fo\031\330?\036\370U\014\253K\321?}\247\027\376\332\376\314?K\243,\225\347\277\327?\"BX\322\022\\\314?h&\372\005\205\362\341?\364\365\032\034\3772\353?\254.E`\007~\265?\245;\247\001\017\022\272?\321\003J\002\306g\320?\'\233l\262\311&\333?\037\361x]\0258\343?\213au)\002;\340?\274*p\346\334#\336?\321\003J\002\306g\300?>\314\002\362E\242\324?\301\370\014b\241\007\324?4r\226UkD\316?0(\224\217\0034\303?\335\r/\346\3064\325?\211&\205}\351\344\330?\347\362\022\347\223y\324?\332\033\351C\362[\321?U\210\020\226\264\004\307?\235\360L\177\203n\347?\203u\264y\237\342\302?lD\036:#g\331?\364\311<\2125\227\307?\367\210\307\353\252\300\331?G\027]t\321E\267?)5\3660\013\310\307?EJ\030\2650\365\330?\366\356=mi\037\275?a\324\302\324c;\321?\007\233\341:e4\344?.\216\n\021\302\222\306?\003\251\233\230\220[\340?\3433\210\205\036P\262?QT\375\2301\302\315?5\264c\260\031\256\323?y\350\214\234e\325\312?\021\254\243\315\373\024\307?\360\n\262(\300m\305?\024\023r\013\336\006\322?{\341\257\355\317\301\354?E}\323\365\217\244\332?[\202\213\243B\204\340?o\253\354w\005Y\344?\201\333*\373]A\326?\245;\247\001\017\022\272?y\350\214\234e\325\272?\213\030\313\037\276\275\274?\017\207\242\352\307\214\241?\202f\242_P(\337?\017\207\242\352\307\214\241?\352\344X\211hR\330?f\036\305\232\313K\314?\254\002g\316=\342\341?6\201\250o\272\376\301?\\9\341\231\376\006\335?\326ML\310-x\333?\220\031#\334\341P\324?\\\006&Y\237W\313?\264!\343\276\377\351\300?\271\331\220q\337\377\344?\327\347\325Fo\031\330?\023F-L=\266\323?\354\tZl\234\332\335?h\205\223\330\255=\327?X\357\336\323\226\366\341?\027\005\270\255\262\337\265?\244\241\035\203\315p\315?"
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 704
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 704
          }
        }
        tensor_content: "Kz\371\323\026\032\340?\346O[h\300\222\336?\346O[h\300\222\336?j\013\rX\322\313\337?\272fu\030e*\316?S\361\\\263:\214\342?\0229A\270\033\373\336?\341n\354{DN\260?\346O[h\300\222\336?\350\232\325a\224\251\350?\346O[h\300\222\336?S\361\\\263:\214\342?\346O[h\300\222\336?\346O[h\300\222\336?\262\357\0219A\270\313?\036F\231\212\347\232\325?S\361\\\263:\214\342?j\013\rX\322\313\337?\025\3175\253\303(\323?Kz\371\323\026\032\340?S\361\\\263:\214\342?S\361\\\263:\214\342?\306s\315\3520\312\344?\210Q\246\342\271f\345?\306s\315\3520\312\344?Kz\371\323\026\032\340?\346O[h\300\222\336?\346O[h\300\222\336?Kz\371\323\026\032\340?wc\337#r\202\340?\346O[h\300\222\336?\242\001Kz\371\323\246?B\270\033\373\036\221\323?\346O[h\300\222\336?\264:\2142\025\317\345?\346O[h\300\222\336?\346O[h\300\222\336?\346O[h\300\222\336?\275\374i\013\rX\322?R\246\342\271fu\330?\221\023\204\273\261\357\261?\341n\354{DN\340?wc\337#r\202\340?\346O[h\300\222\336?\036F\231\212\347\232\345?\346O[h\300\222\336?\346O[h\300\222\336?\330\254\016\243L\305\343?8\366=\"\'\010\347?\206\006,\351\345O\333?\326a\224\251x\256\351?S\361\\\263:\214\342?Kz\371\323\026\032\340?Kz\371\323\026\032\340?\346O[h\300\222\336?\272fu\030e*\316?\250-4`I/\357?\346O[h\300\222\336?\036F\231\212\347\232\345?\326a\224\251x\256\331?J/\177\332B\003\346?6\253\303(S\361\354?\177\332B\003\226\364\342?B\270\033\373\036\221\303?\272fu\030e*\356?\264:\2142\025\317\345?\272fu\030e*\356?\250-4`I/\357?wc\337#r\202\340?\346O[h\300\222\336?Kz\371\323\026\032\340?Kz\371\323\026\032\340?\272fu\030e*\316?S\361\\\263:\214\342?&\275\374i\013\r\350?S\361\\\263:\214\342?j\013\rX\322\313\337?j\013\rX\322\313\337?\341n\354{DN\240?\264:\2142\025\317\345?\\h\300\222^\376\344?\316\3520\312T<\327?e*\236kV\207\321?\272fu\030e*\316?\346O[h\300\222\336?\275\374i\013\rX\342?S\361\\\263:\214\342?j\013\rX\322\313\337?\262\357\0219A\270\333?j\013\rX\322\313\337?j\013\rX\322\313\357?\0229A\270\033\373\336?\346O[h\300\222\336?b\224\251x\256Y\355?\272fu\030e*\356?\346O[h\300\222\336?\206\006,\351\345O\353?\230?m\241\001K\352?\350\232\325a\224\251\350?\rX\322\313\237\266\340?\272fu\030e*\316?\362\\\263:\2142\325?\242\001Kz\371\323\346?Kz\371\323\026\032\340?\036F\231\212\347\232\345?\002Kz\371\323\026\352?\362\\\263:\2142\265?\002Kz\371\323\026\232?\250-4`I/\357?Z\035F\231\212\347\352?\346O[h\300\222\336?\362\\\263:\2142\325?\346O[h\300\222\336?\230?m\241\001K\352?\262\357\0219A\270\353?Kz\371\323\026\032\340?6\253\303(S\361\354?Kz\371\323\026\032\340?\036F\231\212\347\232\345?\346O[h\300\222\336?\341n\354{DN\340?wc\337#r\202\340?\362\\\263:\2142\265?\250-4`I/\357?j\013\rX\322\313\317?R\246\342\271fu\270?\230?m\241\001K\352?\341n\354{DN\340?Kz\371\323\026\032\340?6\253\303(S\361\334?\272fu\030e*\316?\346O[h\300\222\336?\362\\\263:\2142\325?\0229A\270\033\373\336?\346O[h\300\222\336?\346O[h\300\222\336?j\013\rX\322\313\337?j\013\rX\322\313\337?S\361\\\263:\214\342?Kz\371\323\026\032\340?\025\3175\253\303(\343?\002Kz\371\323\026\352?\346O[h\300\222\336?\230?m\241\001K\352?\346O[h\300\222\336?\346O[h\300\222\336?\341n\354{DN\240?\314\237\266\320\200%\355?\250-4`I/\357?wc\337#r\202\340?wc\337#r\202\340?S\361\\\263:\214\342?b\224\251x\256Y\255?\341n\354{DN\240?\272fu\030e*\356?\346O[h\300\222\336?\341n\354{DN\340?8\366=\"\'\010\347?\002Kz\371\323\026\232?S\361\\\263:\214\342?Kz\371\323\026\032\340?\250-4`I/\357?\346O[h\300\222\336?\0229A\270\033\373\336?\346O[h\300\222\336?\346O[h\300\222\336?R\246\342\271fu\270?Kz\371\323\026\032\340?\306s\315\3520\312\344?\346O[h\300\222\336?\002Kz\371\323\026\352?\341n\354{DN\240?@m\241\001Kz\351?\341n\354{DN\340?\341n\354{DN\240?\370\210\234 \334\215\355?\346O[h\300\222\336?\272fu\030e*\356?wc\337#r\202\340?\220\310\t\302\335\330\347?Kz\371\323\026\032\340?\346O[h\300\222\336?9A\270\033\373\036\341?j\013\rX\322\313\337?\350\232\325a\224\251\350?\346O[h\300\222\336?\341n\354{DN\260?\002Kz\371\323\026\252?\346O[h\300\222\336?\372\323\026\032\260\244\327?\340#r\202p7\346?\341n\354{DN\340?\221\023\204\273\261\357\341?\250-4`I/\357?\346O[h\300\222\336?S\361\\\263:\214\342?0\177\332B\003\226\344?v\030e*\236k\346?d\337#r\202p\347?0\177\332B\003\226\344?\036F\231\212\347\232\345?\346O[h\300\222\336?j\013\rX\322\313\337?\346O[h\300\222\336?S\361\\\263:\214\342?n\241\001Kz\371\323?\341n\354{DN\340?\275\374i\013\rX\322?\360\0219A\270\033\353?\346O[h\300\222\336?\346O[h\300\222\336?\346O[h\300\222\336?\0229A\270\033\373\316?wc\337#r\202\340?wc\337#r\202\340?Kz\371\323\026\032\340?e*\236kV\207\341?Kz\371\323\026\032\340?\341n\354{DN\340?\232\212\347\232\325a\304?\346O[h\300\222\336?Kz\371\323\026\032\340?R\246\342\271fu\270?\370\210\234 \334\215\355?\264:\2142\025\317\345?\250-4`I/\357?S\361\\\263:\214\342?\370\210\234 \334\215\355?S\361\\\263:\214\342?\002Kz\371\323\026\232?\0229A\270\033\373\276?\275\374i\013\rX\322?\346O[h\300\222\336?\346O[h\300\222\336?\346O[h\300\222\336?\314\237\266\320\200%\355?\346O[h\300\222\336?\341n\354{DN\340?\002Kz\371\323\026\232?wc\337#r\202\340?\206\006,\351\345O\333?\346O[h\300\222\336?\346O[h\300\222\336?\002Kz\371\323\026\232?\346O[h\300\222\336?\275\374i\013\rX\322?\346O[h\300\222\336?\346O[h\300\222\336?j\013\rX\322\313\317?\025\3175\253\303(\343?8\366=\"\'\010\347?Kz\371\323\026\032\340?\232\212\347\232\325a\324?\346O[h\300\222\336?wc\337#r\202\340?wc\337#r\202\340?0\177\332B\003\226\344?\341n\354{DN\240?S\361\\\263:\214\342?\0229A\270\033\373\336?\346O[h\300\222\336?\264:\2142\025\317\345?Kz\371\323\026\032\340?R\246\342\271fu\270?\346O[h\300\222\336?\351\345O[h\300\342?n\241\001Kz\371\343?\275\374i\013\rX\322?S\361\\\263:\214\342?\370\210\234 \334\215\355?S\361\\\263:\214\342?\326a\224\251x\256\351?\002Kz\371\323\026\232?\252x\256Y\035F\311?Z\035F\231\212\347\332?\0229A\270\033\373\336?\253\303(S\361\\\343?0\177\332B\003\226\344?\346O[h\300\222\336?R\246\342\271fu\310?\242\001Kz\371\323\246?\341n\354{DN\300?8\366=\"\'\010\347?\252x\256Y\035F\331?\346O[h\300\222\336?8\366=\"\'\010\347?Kz\371\323\026\032\340?j\013\rX\322\313\337?\346O[h\300\222\336?\250-4`I/\357?S\361\\\263:\214\342?\216}\217\310\t\302\355?B\270\033\373\036\221\343?\341n\354{DN\340?\0229A\270\033\373\336?\272fu\030e*\356?\346O[h\300\222\336?6\253\303(S\361\354?\272fu\030e*\316?\346O[h\300\222\336?\n\302\335\330\367\210\334?\272fu\030e*\316?\346O[h\300\222\336?0\177\332B\003\226\344?lV\207Q\246\342\351?\346O[h\300\222\336?S\361\\\263:\214\342?\272fu\030e*\316?\346O[h\300\222\336?\314\237\266\320\200%\355?\362\\\263:\2142\265?\330\254\016\243L\305\343?\000\000\000\000\000\000\360?\220\310\t\302\335\330\347?0\177\332B\003\226\344?\206\006,\351\345O\353?\rX\322\313\237\266\320?\346O[h\300\222\336?\002Kz\371\323\026\352?\373\036\221\023\204\273\341?\002Kz\371\323\026\212?\264:\2142\025\317\345?\250-4`I/\357?\341n\354{DN\240?j\013\rX\322\313\337?\346O[h\300\222\336?\341n\354{DN\340?R\246\342\271fu\270?j\013\rX\322\313\337?\373\036\221\023\204\273\341?Kz\371\323\026\032\340?8\366=\"\'\010\347?\002Kz\371\323\026\352?\314\237\266\320\200%\355?\341n\354{DN\340?S\361\\\263:\214\342?\346O[h\300\222\336?\346O[h\300\222\336?&\275\374i\013\r\330?\262\357\0219A\270\273?\025\3175\253\303(\343?S\361\\\263:\214\342?\250-4`I/\357?B\270\033\373\036\221\343?8\366=\"\'\010\347?\221\023\204\273\261\357\261?\346O[h\300\222\336?\346O[h\300\222\336?\346O[h\300\222\336?S\361\\\263:\214\342?S\361\\\263:\214\342?\350\232\325a\224\251\350?\362\\\263:\2142\305?\206\006,\351\345O\353?v\030e*\236k\326?\346O[h\300\222\336?wc\337#r\202\340?b\224\251x\256Y\275?j\013\rX\322\313\337?\341n\354{DN\340?\324\026\032\260\244\227\357?\362\\\263:\2142\345?\206\006,\351\345O\353?\210Q\246\342\271f\345?\346O[h\300\222\336?\346O[h\300\222\336?\346O[h\300\222\336?\0229A\270\033\373\336?\346O[h\300\222\336?\002Kz\371\323\026\232?\341n\354{DN\320?\n\302\335\330\367\210\314?\274\261\357\0219A\350?\346O[h\300\222\336?\346O[h\300\222\336?\341n\354{DN\340?.4`I/\177\352?\326a\224\251x\256\351?t\315\3520\312T\354?\036F\231\212\347\232\345?\346O[h\300\222\336?\346O[h\300\222\336?\362\\\263:\2142\265?Kz\371\323\026\032\340?\250-4`I/\357?\242\001Kz\371\323\346?\250-4`I/\357?J/\177\332B\003\346?\275\374i\013\rX\322?\002Kz\371\323\026\332?\252x\256Y\035F\331?\206\006,\351\345O\353?\346O[h\300\222\336?B\270\033\373\036\221\343?S\361\\\263:\214\342?\341n\354{DN\240?S\361\\\263:\214\342?j\013\rX\322\313\337?d\337#r\202p\347?\250-4`I/\357?\350\232\325a\224\251\350?\346O[h\300\222\336?\275\374i\013\rX\322?\206\006,\351\345O\353?S\361\\\263:\214\342?\0229A\270\033\373\336?\346O[h\300\222\336?~\217\310\t\302\335\350?\330\254\016\243L\305\343?\346O[h\300\222\336?B\270\033\373\036\221\223?\346O[h\300\222\336?\0229A\270\033\373\336?0\177\332B\003\226\344?\250-4`I/\357?\341n\354{DN\340?\346O[h\300\222\336?\362\\\263:\2142\265?Kz\371\323\026\032\340?\326a\224\251x\256\331?R\246\342\271fu\270?\036F\231\212\347\232\345?\002Kz\371\323\026\272?Kz\371\323\026\032\340?S\361\\\263:\214\342?\025\3175\253\303(\343?>\"\'\010wc\337?\346O[h\300\222\336?\346O[h\300\222\336?\346O[h\300\222\336?\272fu\030e*\356?\326a\224\251x\256\351?\346O[h\300\222\336?\346O[h\300\222\336?S\361\\\263:\214\342?\346O[h\300\222\336?\0229A\270\033\373\336?\346O[h\300\222\336?\275\374i\013\rX\322?b\224\251x\256Y\275?\346O[h\300\222\336?\346O[h\300\222\336?Kz\371\323\026\032\340?\206\006,\351\345O\333?\025\3175\253\303(\343?\264:\2142\025\317\345?\346O[h\300\222\336?\250-4`I/\357?\306s\315\3520\312\324?\341n\354{DN\340?S\361\\\263:\214\342?j\013\rX\322\313\337?\341n\354{DN\240?\346O[h\300\222\336?\362\\\263:\2142\265?Kz\371\323\026\032\340?\272fu\030e*\356?\000\000\000\000\000\000\360?\346O[h\300\222\336?9A\270\033\373\036\301?\272fu\030e*\316?\002Kz\371\323\026\232?\362\\\263:\2142\305?\351\345O[h\300\302?\232\212\347\232\325a\344?\272fu\030e*\356?\346O[h\300\222\336?\372\323\026\032\260\244\307?\206\006,\351\345O\333?\272fu\030e*\356?R\246\342\271fu\270?\272fu\030e*\316?wc\337#r\202\340?\346O[h\300\222\336?\264:\2142\025\317\345?\002Kz\371\323\026\232?\242\001Kz\371\323\306?\346O[h\300\222\336?\346O[h\300\222\336?\252x\256Y\035F\331?wc\337#r\202\340?\362\\\263:\2142\265?j\013\rX\322\313\337?\000\000\000\000\000\000\360?j\013\rX\322\313\337?\002Kz\371\323\026\352?\346O[h\300\222\336?S\361\\\263:\214\342?\373\036\221\023\204\273\341?j\013\rX\322\313\337?S\361\\\263:\214\342?Kz\371\323\026\032\340?\346O[h\300\222\336?S\361\\\263:\214\342?\350\232\325a\224\251\350?wc\337#r\202\340?\036F\231\212\347\232\345?d\337#r\202p\347?\341n\354{DN\240?\370\210\234 \334\215\355?\250-4`I/\357?0\177\332B\003\226\344?\002Kz\371\323\026\352?\346O[h\300\222\336?\272fu\030e*\356?wc\337#r\202\340?\346O[h\300\222\336?\264:\2142\025\317\345?B\270\033\373\036\221\243?R\246\342\271fu\270?J/\177\332B\003\326?P[h\300\222^\356?\275\374i\013\rX\322?Kz\371\323\026\032\340?\341n\354{DN\340?Kz\371\323\026\032\340?Kz\371\323\026\032\340?R\246\342\271fu\270?\025\3175\253\303(\343?\250-4`I/\357?\346O[h\300\222\336?\346O[h\300\222\336?\346O[h\300\222\336?\242\001Kz\371\323\266?\002Kz\371\323\026\352?d\337#r\202p\347?\362\\\263:\2142\305?\346O[h\300\222\336?\346O[h\300\222\356?\346O[h\300\222\336?\346O[h\300\222\336?\002Kz\371\323\026\232?\346O[h\300\222\336?\002Kz\371\323\026\352?wc\337#r\202\340?\346O[h\300\222\336?R\246\342\271fu\270?\250-4`I/\357?R\246\342\271fu\270?\346O[h\300\222\336?S\361\\\263:\214\342?n\241\001Kz\371\323?\025\3175\253\303(\343?\346O[h\300\222\336?\306s\315\3520\312\344?\272fu\030e*\316?\346O[h\300\222\336?\341n\354{DN\340?\000\000\000\000\000\000\360?\014\rX\322\313\237\346?B\270\033\373\036\221\263?8\366=\"\'\010\347?\350\232\325a\224\251\350?\000\000\000\000\000\000\000\000\346O[h\300\222\336?\346O[h\300\222\336?\346O[h\300\222\336?wc\337#r\202\340?R\246\342\271fu\270?\346O[h\300\222\336?\346O[h\300\222\336?\346O[h\300\222\336?\250-4`I/\357?\250-4`I/\357?S\361\\\263:\214\342?\346O[h\300\222\336?Kz\371\323\026\032\340?\346O[h\300\222\336?\272fu\030e*\356?\346O[h\300\222\336?\346O[h\300\222\336?\0229A\270\033\373\356?\341n\354{DN\260?\272fu\030e*\356?\004\226\364\362\247-\344?\034\373\036\221\023\204\353?\346O[h\300\222\336?\272fu\030e*\356?\250-4`I/\357?|DN\020\356\306\356?\250-4`I/\357?0\177\332B\003\226\344?\336\330\367\210\234 \354?\002Kz\371\323\026\232?\346O[h\300\222\336?\346O[h\300\222\336?\341n\354{DN\340?\242\001Kz\371\323\326?\025\3175\253\303(\323?\346O[h\300\222\336?\230?m\241\001K\352?\025\3175\253\303(\343?\346O[h\300\222\336?S\361\\\263:\214\342?\346O[h\300\222\336?\341n\354{DN\240?\346O[h\300\222\336?\341n\354{DN\340?|DN\020\356\306\356?\250-4`I/\357?\3175\253\303(S\341?\252x\256Y\035F\351?\346O[h\300\222\336?\346O[h\300\222\336?S\361\\\263:\214\342?\272fu\030e*\356?\002Kz\371\323\026\232?\036F\231\212\347\232\345?\346O[h\300\222\336?Kz\371\323\026\032\340?\346O[h\300\222\336?8\366=\"\'\010\347?S\361\\\263:\214\342?\362\\\263:\2142\265?\316\3520\312T<\347?\002Kz\371\323\026\352?\362\\\263:\2142\305?\346O[h\300\222\336?\346O[h\300\222\336?Kz\371\323\026\032\340?\346O[h\300\222\336?\002Kz\371\323\026z?\'\010wc\337#\342?\314\237\266\320\200%\355?S\361\\\263:\214\342?\272fu\030e*\356?\346O[h\300\222\336?wc\337#r\202\340?\346O[h\300\222\336?\370\210\234 \334\215\355?\272fu\030e*\316?\370\210\234 \334\215\355?B\270\033\373\036\221\243?\351\345O[h\300\322?Kz\371\323\026\032\340?\250-4`I/\357?\346O[h\300\222\336?j\013\rX\322\313\357?b\224\251x\256Y\315?\346O[h\300\222\336?\346O[h\300\222\336?\275\374i\013\rX\322?\036F\231\212\347\232\345?\370\210\234 \334\215\355?>\"\'\010wc\357?\272fu\030e*\356?\346O[h\300\222\336?wc\337#r\202\340?0\177\332B\003\226\344?\252x\256Y\035F\331?\243L\305s\315\352\340?S\361\\\263:\214\342?wc\337#r\202\340?\252x\256Y\035F\331?\275\374i\013\rX\322?j\013\rX\322\313\337?\272fu\030e*\316?\346O[h\300\222\336?\275\374i\013\rX\322?\346O[h\300\222\336?H\344\004\341n\354\353?\362\\\263:\2142\305?B\270\033\373\036\221\323?\036F\231\212\347\232\345?\346O[h\300\222\336?Kz\371\323\026\032\340?\304(S\361\\\263\352?\341n\354{DN\340?\250-4`I/\357?\346O[h\300\222\336?R\246\342\271fu\270?b\224\251x\256Y\335?\346O[h\300\222\336?\346O[h\300\222\336?\346O[h\300\222\336?\264:\2142\025\317\345?~\217\310\t\302\335\330?\250-4`I/\357?wc\337#r\202\340?wc\337#r\202\340?\002Kz\371\323\026\232?\346O[h\300\222\336?\346O[h\300\222\336?S\361\\\263:\214\342?\264:\2142\025\317\345?.4`I/\177\332?\346O[h\300\222\336?wc\337#r\202\340?\346O[h\300\222\336?\002Kz\371\323\026\352?\341n\354{DN\340?\002Kz\371\323\026\352?R\246\342\271fu\270?wc\337#r\202\340?j\013\rX\322\313\317?\346O[h\300\222\336?\002Kz\371\323\026\352?\351\345O[h\300\302?\240\266\320\200%\275\354?\326a\224\251x\256\351?\002Kz\371\323\026\352?j\013\rX\322\313\337?\346O[h\300\222\336?J/\177\332B\003\346?"
      }
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 704
          }
        }
        tensor_content: "UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\000\000\000\000\000\000\000\000UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\000\000\000\000\000\000\000\000UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?8\216\3438\216\343\350?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\000\000\000\000\000\000\360?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\354?\034\307q\034\307q\334?8\216\3438\216\343\350?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\274?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\354?\034\307q\034\307q\334?UUUUUU\325?\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\274?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\000\000\000\000\000\000\360?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\000\000\000\000\000\000\360?\034\307q\034\307q\334?\034\307q\034\307q\314?UUUUUU\325?\034\307q\034\307q\354?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?r\034\307q\034\307\341?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\314?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\000\000\000\000\000\000\000\000\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\274?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\000\000\000\000\000\000\000\000\034\307q\034\307q\334?\034\307q\034\307q\334?\000\000\000\000\000\000\000\000\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\000\000\000\000\000\000\000\000UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\354?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\274?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?r\034\307q\034\307\341?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\000\000\000\000\000\000\360?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\314?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\000\000\000\000\000\000\360?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\354?UUUUUU\325?UUUUUU\325?UUUUUU\325?\000\000\000\000\000\000\000\000UUUUUU\325?8\216\3438\216\343\350?\034\307q\034\307q\334?UUUUUU\345?UUUUUU\325?\034\307q\034\307q\354?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\000\000\000\000\000\000\360?\034\307q\034\307q\334?\034\307q\034\307q\354?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\000\000\000\000\000\000\000\000\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\274?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\000\000\000\000\000\000\360?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\274?\034\307q\034\307q\314?UUUUUU\325?r\034\307q\034\307\341?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\354?\034\307q\034\307q\354?\034\307q\034\307q\334?UUUUUU\345?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\354?UUUUUU\325?\034\307q\034\307q\334?\000\000\000\000\000\000\360?UUUUUU\325?\034\307q\034\307q\334?\000\000\000\000\000\000\000\000UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\000\000\000\000\000\000\360?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\274?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\314?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\354?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?r\034\307q\034\307\341?\000\000\000\000\000\000\360?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\354?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\000\000\000\000\000\000\360?UUUUUU\325?\034\307q\034\307q\274?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\354?UUUUUU\325?\034\307q\034\307q\354?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\354?UUUUUU\325?\000\000\000\000\000\000\000\000UUUUUU\325?UUUUUU\325?\034\307q\034\307q\354?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\274?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\354?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\274?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\000\000\000\000\000\000\000\000UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\314?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\354?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\000\000\000\000\000\000\000\000UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\274?\034\307q\034\307q\334?\000\000\000\000\000\000\000\000UUUUUU\325?UUUUUU\325?\034\307q\034\307q\274?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\354?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\000\000\000\000\000\000\000\000UUUUUU\325?\000\000\000\000\000\000\000\000\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\000\000\000\000\000\000\000\000UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\000\000\000\000\000\000\000\000UUUUUU\325?\034\307q\034\307q\274?\034\307q\034\307q\354?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\354?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\000\000\000\000\000\000\000\000UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\000\000\000\000\000\000\000\000UUUUUU\325?UUUUUU\325?UUUUUU\325?\000\000\000\000\000\000\000\000UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\000\000\000\000\000\000\360?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\354?\034\307q\034\307q\354?\000\000\000\000\000\000\000\000\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\000\000\000\000\000\000\360?UUUUUU\325?\000\000\000\000\000\000\360?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?UUUUUU\325?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\000\000\000\000\000\000\360?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\354?\034\307q\034\307q\334?UUUUUU\325?\034\307q\034\307q\334?\000\000\000\000\000\000\360?\034\307q\034\307q\334?"
      }
    }
  }
}
node {
  name: "Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 704
          }
        }
        tensor_content: "\215\211\364@\345\354\246?\000\000\000\000\000\000\360?&\322\003\225\263[\350?\004\225\263[\370\325\310?g\267\360\2531\221\336?\303\257\306Dz\240\342?\277\032\023\351\201\312\331?*g\267\360\2531\321?g\267\360\2531\221\316?g\267\360\2531\221\236?\027~5&\322\003\345?\303\257\306Dz\240\342?5&\322\003\225\263\353?*g\267\360\2531\301?g\267\360\2531\221\256?g\267\360\2531\221\256?\"=P9\273\205\357?\023\351\201\312\331-\354?\027~5&\322\003\305?\215\211\364@\345\354\306?\2541\221\036\250\234\355?\364@\345\354\026~\345?\027~5&\322\003\325?\277\032\023\351\201\312\351?z\240rv\013\277\352?\215\211\364@\345\354\306?\023\351\201\312\331-\354?\027~5&\322\003\305?\000\000\000\000\000\000\000\000\027~5&\322\003\305?Ez\240rv\013\357?\023\351\201\312\331-\354?\240rv\013\277\032\303?\260\306Dz\240r\346?\211\364@\345\354\026\356?\215\211\364@\345\354\306?g\267\360\2531\221\256?g\267\360\2531\221\316?\027~5&\322\003\345?g\267\360\2531\221\236?\027~5&\322\003\345?*g\267\360\2531\321?\260\306Dz\240r\346?\010*g\267\360\253\341?g\267\360\2531\221\316?\322\003\225\263[\370\345?z\240rv\013\277\352?\023\351\201\312\331-\354?\341Wc\"=P\351?kL\244\007*g\347?g\267\360\2531\221\276?\345\354\026~5&\342?\000\000\000\000\000\000\360?\027~5&\322\003\345?\023\351\201\312\331-\354?\215\211\364@\345\354\266?Ez\240rv\013\357?5&\322\003\225\263\353?\"=P9\273\205\337?*g\267\360\2531\301?z\240rv\013\277\312?~5&\322\003\225\343?\215\211\364@\345\354\266?\004\225\263[\370\325\330?\004\225\263[\370\325\310?\361\2531\221\036\250\334?\027~5&\322\003\305?*g\267\360\2531\321?\023\351\201\312\331-\354?\\\370\325\230H\017\344?\215\211\364@\345\354\266?\023\351\201\312\331-\354?Ez\240rv\013\357?\345\354\026~5&\342?\235\335\302\257\306D\352?\345\354\026~5&\342?\010*g\267\360\253\341?\000\000\000\000\000\000\000\000\215\211\364@\345\354\266?\240rv\013\277\032\263?\\\370\325\230H\017\344?g\267\360\2531\221\236?\211\364@\345\354\026\356?\316n\341Wc\"\355?5&\322\003\225\263\353?z\240rv\013\277\332?\215\211\364@\345\354\266?\027~5&\322\003\305?\240rv\013\277\032\303?g\267\360\2531\221\316?\215\211\364@\345\354\266?\341Wc\"=P\351?\215\211\364@\345\354\306?\004\225\263[\370\325\350?Ez\240rv\013\357?\004\225\263[\370\325\310?\240rv\013\277\032\343?\"=P9\273\205\337?g\267\360\2531\221\236?\240rv\013\277\032\263?\240rv\013\277\032\343?\027~5&\322\003\325?5&\322\003\225\263\353?H\017T\316n\341\347?\345\354\026~5&\342?Ez\240rv\013\357?\2541\221\036\250\234\335?\000\000\000\000\000\000\000\000g\267\360\2531\221\316?g\267\360\2531\221\256?\260\306Dz\240r\346?\027~5&\322\003\325?5&\322\003\225\263\353?g\267\360\2531\221\256?\361\2531\221\036\250\354?\027~5&\322\003\305?~5&\322\003\225\343?H\017T\316n\341\347?\"=P9\273\205\357?g\267\360\2531\221\356?\023\351\201\312\331-\354?g\267\360\2531\221\316?\2541\221\036\250\234\335?\215\211\364@\345\354\326?L\244\007*g\267\340?\2541\221\036\250\234\335?\240rv\013\277\032\343?\023\351\201\312\331-\354?\027~5&\322\003\345?5&\322\003\225\263\353?\345\354\026~5&\342?\027~5&\322\003\305?\027~5&\322\003\325?\341Wc\"=P\351?Xc\"=P9\353?\004\225\263[\370\325\310?\000\000\000\000\000\000\000\000&\322\003\225\263[\350?\"=P9\273\205\357?\215\211\364@\345\354\306?&\322\003\225\263[\350?\027~5&\322\003\345?\027~5&\322\003\305?\277\032\023\351\201\312\351?z\240rv\013\277\352?\215\211\364@\345\354\306?\361\2531\221\036\250\334?\211\364@\345\354\026\356?g\267\360\2531\221\316?\215\211\364@\345\354\246?\027~5&\322\003\345?\345\354\026~5&\342?\2541\221\036\250\234\335?\345\354\026~5&\342?5&\322\003\225\263\353?\2541\221\036\250\234\355?\215\211\364@\345\354\306?\027~5&\322\003\325?H\017T\316n\341\347?\"=P9\273\205\337?\260\306Dz\240r\346?\027~5&\322\003\305?\027~5&\322\003\345?\027~5&\322\003\305?H\017T\316n\341\347?\215\211\364@\345\354\306?g\267\360\2531\221\256?g\267\360\2531\221\316?\\\370\325\230H\017\344?g\267\360\2531\221\316?\215\211\364@\345\354\306?\361\2531\221\036\250\334?\361\2531\221\036\250\354?\027~5&\322\003\345?\"=P9\273\205\357?\361\2531\221\036\250\334?\215\211\364@\345\354\306?z\240rv\013\277\332?\023\351\201\312\331-\354?\345\354\026~5&\342?\027~5&\322\003\345?\010*g\267\360\253\341?o\341Wc\"=\340?\023\351\201\312\331-\354?g\267\360\2531\221\236?g\267\360\2531\221\316?\215\211\364@\345\354\306?\240rv\013\277\032\303?g\267\360\2531\221\316?g\267\360\2531\221\256?\"=P9\273\205\357?\027~5&\322\003\305?\"=P9\273\205\337?g\267\360\2531\221\316?5&\322\003\225\263\353?\211\364@\345\354\026\356?z\240rv\013\277\332?z\240rv\013\277\312?\"=P9\273\205\337?z\240rv\013\277\332?\023\351\201\312\331-\354?Ez\240rv\013\357?Ez\240rv\013\357?\215\211\364@\345\354\306?\345\354\026~5&\342?\240rv\013\277\032\303?*g\267\360\2531\321?\215\211\364@\345\354\306?\345\354\026~5&\342?g\267\360\2531\221\216?\023\351\201\312\331-\354?g\267\360\2531\221\316?\240rv\013\277\032\343?\004\225\263[\370\325\310?\260\306Dz\240r\346?*g\267\360\2531\301?g\267\360\2531\221\336?\010*g\267\360\253\341?\027~5&\322\003\305?~5&\322\003\225\343?5&\322\003\225\263\353?\215\211\364@\345\354\306?\240rv\013\277\032\263?\345\354\026~5&\342?\240rv\013\277\032\263?\215\211\364@\345\354\306?\345\354\026~5&\342?g\267\360\2531\221\336?\027~5&\322\003\325?\2541\221\036\250\234\355?\235\335\302\257\306D\352?Ez\240rv\013\357?\000\000\000\000\000\000\360?\215\211\364@\345\354\306?9\273\205_\215\211\344?\211\364@\345\354\026\356?\023\351\201\312\331-\354?Ez\240rv\013\357?\2541\221\036\250\234\355?\027~5&\322\003\305?kL\244\007*g\347?Ez\240rv\013\357?\000\000\000\000\000\000\360?*g\267\360\2531\341?\215\211\364@\345\354\306?\027~5&\322\003\345?\027~5&\322\003\305?\322\003\225\263[\370\345?L\244\007*g\267\340?&\322\003\225\263[\350?Ez\240rv\013\357?\\\370\325\230H\017\344?\361\2531\221\036\250\354?\027~5&\322\003\345?*g\267\360\2531\301?\215\211\364@\345\354\306?\361\2531\221\036\250\334?\023\351\201\312\331-\354?kL\244\007*g\347?\341Wc\"=P\351?\322\003\225\263[\370\345?\277\032\023\351\201\312\351?g\267\360\2531\221\216?\027~5&\322\003\345?5&\322\003\225\263\353?\361\2531\221\036\250\334?\027~5&\322\003\305?\215\211\364@\345\354\306?\345\354\026~5&\342?\"=P9\273\205\337?\"=P9\273\205\357?\361\2531\221\036\250\334?\000\000\000\000\000\000\000\000z\240rv\013\277\272?Ez\240rv\013\357?\215\211\364@\345\354\306?g\267\360\2531\221\316?z\240rv\013\277\332?g\267\360\2531\221\356?\004\225\263[\370\325\330?\215\211\364@\345\354\266?5&\322\003\225\263\333?\027~5&\322\003\325?~5&\322\003\225\343?\010*g\267\360\253\341?\027~5&\322\003\325?\\\370\325\230H\017\344?\010*g\267\360\253\341?g\267\360\2531\221\356?\215\211\364@\345\354\326?\345\354\026~5&\342?\215\211\364@\345\354\306?\361\2531\221\036\250\334?Ez\240rv\013\357?\027~5&\322\003\305?5&\322\003\225\263\353?\023\351\201\312\331-\354?\316n\341Wc\"\355?\215\211\364@\345\354\266?z\240rv\013\277\352?g\267\360\2531\221\336?\023\351\201\312\331-\354?\000\000\000\000\000\000\000\000z\240rv\013\277\332?g\267\360\2531\221\256?H\017T\316n\341\347?\215\211\364@\345\354\266?\023\351\201\312\331-\354?*g\267\360\2531\321?\"=P9\273\205\337?\2541\221\036\250\234\335?\277\032\023\351\201\312\331?o\341Wc\"=\340?\345\354\026~5&\342?\361\2531\221\036\250\334?\211\364@\345\354\026\356?\316n\341Wc\"\355?*g\267\360\2531\321?\215\211\364@\345\354\306?\"=P9\273\205\337?\"=P9\273\205\357?\277\032\023\351\201\312\351?*g\267\360\2531\321?\211\364@\345\354\026\356?*g\267\360\2531\321?g\267\360\2531\221\316?\023\351\201\312\331-\354?z\240rv\013\277\312?\277\032\023\351\201\312\331?\345\354\026~5&\342?g\267\360\2531\221\316?\027~5&\322\003\325?\027~5&\322\003\305?\361\2531\221\036\250\334?\215\211\364@\345\354\266?\211\364@\345\354\026\356?\004\225\263[\370\325\310?g\267\360\2531\221\316?g\267\360\2531\221\236?\322\003\225\263[\370\325?\027~5&\322\003\305?g\267\360\2531\221\336?\215\211\364@\345\354\306?Xc\"=P9\353?g\267\360\2531\221\356?Ez\240rv\013\357?\260\306Dz\240r\346?\215\211\364@\345\354\326?\260\306Dz\240r\346?\215\211\364@\345\354\266?\345\354\026~5&\342?~5&\322\003\225\343?~5&\322\003\225\343?\345\354\026~5&\342?g\267\360\2531\221\236?\215\211\364@\345\354\306?\000\000\000\000\000\000\360?\345\354\026~5&\322?g\267\360\2531\221\316?\215\211\364@\345\354\266?g\267\360\2531\221\236?\027~5&\322\003\325?\215\211\364@\345\354\266?z\240rv\013\277\332?g\267\360\2531\221\316?g\267\360\2531\221\316?o\341Wc\"=\320?g\267\360\2531\221\316?\215\211\364@\345\354\346?\2541\221\036\250\234\355?\240rv\013\277\032\343?g\267\360\2531\221\256?&\322\003\225\263[\350?5&\322\003\225\263\333?\000\000\000\000\000\000\360?\215\211\364@\345\354\266?g\267\360\2531\221\276?\361\2531\221\036\250\334?\004\225\263[\370\325\350?\"=P9\273\205\357?g\267\360\2531\221\316?\215\211\364@\345\354\346?\2541\221\036\250\234\335?g\267\360\2531\221\316?\027~5&\322\003\305?\361\2531\221\036\250\334?\215\211\364@\345\354\306?L\244\007*g\267\340?\\\370\325\230H\017\344?g\267\360\2531\221\316?*g\267\360\2531\321?Ez\240rv\013\357?\322\003\225\263[\370\345?\361\2531\221\036\250\334?\"=P9\273\205\337?\361\2531\221\036\250\334?\345\354\026~5&\342?\027~5&\322\003\305?\004\225\263[\370\325\310?z\240rv\013\277\352?g\267\360\2531\221\236?&\322\003\225\263[\350?*g\267\360\2531\321?\023\351\201\312\331-\354?\2541\221\036\250\234\355?\027~5&\322\003\305?g\267\360\2531\221\316?\361\2531\221\036\250\354?\215\211\364@\345\354\266?\027~5&\322\003\345?~5&\322\003\225\343?\004\225\263[\370\325\310?\027~5&\322\003\305?\211\364@\345\354\026\356?\023\351\201\312\331-\354?\215\211\364@\345\354\306?H\017T\316n\341\347?\2541\221\036\250\234\335?\215\211\364@\345\354\306?\027~5&\322\003\305?\027~5&\322\003\345?\277\032\023\351\201\312\351?\240rv\013\277\032\303?\004\225\263[\370\325\310?\345\354\026~5&\342?g\267\360\2531\221\316?\277\032\023\351\201\312\351?g\267\360\2531\221\316?\215\211\364@\345\354\346?g\267\360\2531\221\216?\215\211\364@\345\354\326?g\267\360\2531\221\256?\023\351\201\312\331-\354?5&\322\003\225\263\353?kL\244\007*g\347?\000\000\000\000\000\000\360?\027~5&\322\003\305?\004\225\263[\370\325\310?*g\267\360\2531\321?z\240rv\013\277\272?\000\000\000\000\000\000\360?g\267\360\2531\221\216?\027~5&\322\003\345?kL\244\007*g\347?g\267\360\2531\221\316?\211\364@\345\354\026\356?5&\322\003\225\263\353?g\267\360\2531\221\316?o\341Wc\"=\340?g\267\360\2531\221\216?\345\354\026~5&\342?Ez\240rv\013\357?\277\032\023\351\201\312\331?\215\211\364@\345\354\306?\2541\221\036\250\234\335?\027~5&\322\003\345?Ez\240rv\013\357?\361\2531\221\036\250\314?Ez\240rv\013\357?H\017T\316n\341\327?g\267\360\2531\221\276?o\341Wc\"=\320?H\017T\316n\341\327?\\\370\325\230H\017\344?z\240rv\013\277\332?g\267\360\2531\221\356?\215\211\364@\345\354\246?\\\370\325\230H\017\324?kL\244\007*g\347?\2541\221\036\250\234\355?z\240rv\013\277\312?g\267\360\2531\221\316?\260\306Dz\240r\346?g\267\360\2531\221\316?\"=P9\273\205\337?\027~5&\322\003\345?o\341Wc\"=\340?\215\211\364@\345\354\326?z\240rv\013\277\352?~5&\322\003\225\343?g\267\360\2531\221\316?\2541\221\036\250\234\335?\004\225\263[\370\325\310?o\341Wc\"=\340?Ez\240rv\013\357?\027~5&\322\003\345?\000\000\000\000\000\000\360?\303\257\306Dz\240\342?\240rv\013\277\032\343?\023\351\201\312\331-\354?z\240rv\013\277\352?\023\351\201\312\331-\354?Ez\240rv\013\357?\"=P9\273\205\357?g\267\360\2531\221\236?\215\211\364@\345\354\266?\345\354\026~5&\342?\"=P9\273\205\337?z\240rv\013\277\352?g\267\360\2531\221\336?g\267\360\2531\221\316?z\240rv\013\277\332?\027~5&\322\003\305?\215\211\364@\345\354\326?&\322\003\225\263[\350?g\267\360\2531\221\316?\004\225\263[\370\325\310?\361\2531\221\036\250\334?\027~5&\322\003\325?\2541\221\036\250\234\335?g\267\360\2531\221\236?\2541\221\036\250\234\355?*g\267\360\2531\321?\027~5&\322\003\305?*g\267\360\2531\321?Ez\240rv\013\357?\322\003\225\263[\370\345?\027~5&\322\003\345?g\267\360\2531\221\316?g\267\360\2531\221\316?g\267\360\2531\221\316?g\267\360\2531\221\316?\215\211\364@\345\354\266?\2541\221\036\250\234\335?Ez\240rv\013\357?\277\032\023\351\201\312\331?H\017T\316n\341\327?\000\000\000\000\000\000\000\000z\240rv\013\277\352?g\267\360\2531\221\316?\2541\221\036\250\234\355?\027~5&\322\003\345?*g\267\360\2531\321?g\267\360\2531\221\256?\027~5&\322\003\325?Ez\240rv\013\357?\240rv\013\277\032\303?z\240rv\013\277\352?z\240rv\013\277\312?o\341Wc\"=\320?\345\354\026~5&\342?\240rv\013\277\032\303?g\267\360\2531\221\316?\004\225\263[\370\325\310?\027~5&\322\003\325?\277\032\023\351\201\312\351?*g\267\360\2531\321?\023\351\201\312\331-\354?o\341Wc\"=\340?\"=P9\273\205\357?z\240rv\013\277\332?\027~5&\322\003\325?g\267\360\2531\221\236?o\341Wc\"=\340?\322\003\225\263[\370\345?\215\211\364@\345\354\346?*g\267\360\2531\321?\027~5&\322\003\305?z\240rv\013\277\312?\010*g\267\360\253\341?g\267\360\2531\221\316?g\267\360\2531\221\316?Ez\240rv\013\357?\027~5&\322\003\345?\211\364@\345\354\026\356?g\267\360\2531\221\316?g\267\360\2531\221\216?\010*g\267\360\253\341?H\017T\316n\341\347?g\267\360\2531\221\356?g\267\360\2531\221\316?\023\351\201\312\331-\354?Xc\"=P9\353?\2541\221\036\250\234\355?\277\032\023\351\201\312\351?~5&\322\003\225\343?\004\225\263[\370\325\310?o\341Wc\"=\320?\000\000\000\000\000\000\360?\240rv\013\277\032\303?\027~5&\322\003\305?z\240rv\013\277\332?g\267\360\2531\221\256?\260\306Dz\240r\346?o\341Wc\"=\320?g\267\360\2531\221\316?\023\351\201\312\331-\354?g\267\360\2531\221\236?\010*g\267\360\253\341?H\017T\316n\341\347?\240rv\013\277\032\343?\215\211\364@\345\354\266?g\267\360\2531\221\316?\215\211\364@\345\354\266?g\267\360\2531\221\216?\"=P9\273\205\357?Xc\"=P9\353?g\267\360\2531\221\316?\240rv\013\277\032\303?Ez\240rv\013\357?o\341Wc\"=\340?~5&\322\003\225\343?Xc\"=P9\353?\322\003\225\263[\370\345?g\267\360\2531\221\336?5&\322\003\225\263\353?g\267\360\2531\221\316?\277\032\023\351\201\312\351?\215\211\364@\345\354\326?\215\211\364@\345\354\266?\260\306Dz\240r\346?\341Wc\"=P\351?kL\244\007*g\347?\2541\221\036\250\234\335?\2541\221\036\250\234\355?\215\211\364@\345\354\306?\\\370\325\230H\017\324?g\267\360\2531\221\316?*g\267\360\2531\301?\215\211\364@\345\354\346?\027~5&\322\003\345?g\267\360\2531\221\316?\211\364@\345\354\026\356?\345\354\026~5&\342?\023\351\201\312\331-\354?\260\306Dz\240r\346?g\267\360\2531\221\216?\277\032\023\351\201\312\331?\215\211\364@\345\354\306?g\267\360\2531\221\336?\240rv\013\277\032\343?g\267\360\2531\221\336?\027~5&\322\003\325?\240rv\013\277\032\303?\260\306Dz\240r\346?Ez\240rv\013\357?\215\211\364@\345\354\306?\345\354\026~5&\342?g\267\360\2531\221\256?\023\351\201\312\331-\354?g\267\360\2531\221\316?\027~5&\322\003\305?\"=P9\273\205\357?\"=P9\273\205\337?z\240rv\013\277\332?\215\211\364@\345\354\306?\322\003\225\263[\370\345?g\267\360\2531\221\316?z\240rv\013\277\332?g\267\360\2531\221\316?\277\032\023\351\201\312\331?g\267\360\2531\221\336?g\267\360\2531\221\316?\027~5&\322\003\305?*g\267\360\2531\321?\215\211\364@\345\354\266?\316n\341Wc\"\355?&\322\003\225\263[\350?*g\267\360\2531\301?\027~5&\322\003\345?~5&\322\003\225\343?H\017T\316n\341\327?\240rv\013\277\032\303?\345\354\026~5&\342?\277\032\023\351\201\312\331?\000\000\000\000\000\000\360?Xc\"=P9\353?\000\000\000\000\000\000\000\000*g\267\360\2531\321?5&\322\003\225\263\353?\240rv\013\277\032\303?Xc\"=P9\353?5&\322\003\225\263\353?\027~5&\322\003\305?5&\322\003\225\263\333?\361\2531\221\036\250\334?g\267\360\2531\221\236?Ez\240rv\013\357?\004\225\263[\370\325\310?\215\211\364@\345\354\246?H\017T\316n\341\347?g\267\360\2531\221\316?\023\351\201\312\331-\354?g\267\360\2531\221\276?\211\364@\345\354\026\356?g\267\360\2531\221\336?\023\351\201\312\331-\354?\215\211\364@\345\354\266?\215\211\364@\345\354\306?g\267\360\2531\221\256?\023\351\201\312\331-\354?\027~5&\322\003\345?z\240rv\013\277\312?\010*g\267\360\253\341?\364@\345\354\026~\345?5&\322\003\225\263\353?g\267\360\2531\221\256?\027~5&\322\003\325?~5&\322\003\225\343?\361\2531\221\036\250\334?\027~5&\322\003\345?\004\225\263[\370\325\310?5&\322\003\225\263\353?L\244\007*g\267\340?"
      }
    }
  }
}
node {
  name: "Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 704
          }
        }
        tensor_content: "\177\272\226l\323\223\344?2\236\274\273N\223\342?\361\024\304\0137N\341?\327\374\226}\373\244\343?\364\361\314\352*\314\347?\010\'\315^\261\246\340?\244\255~\334\346\216\341??\372\354\354O\256\347?E\231y\302\010\245\340?(\214P\n\013\241\347?\232\233\022+\243\234\346?\213\343Nj\327\314\340?\246y_\252\333\026\345?\313i\265|\216\351\342?7~W8\2439\350?\000\000\000\000\000\000\360?^f;\322x\217\340?\324\202\354g\241\302\337?\370S\204\265\266\321\346?\303\245F\347v\336\344?f\360f\372\303\321\343?\320*\222tE\314\341?\336u\232\224G\361\343?BY\022\032{\213\347?\231\343\353\013\0163\345?\016\256f\351\233\300\344?\366\2125\205\"r\342?\327\374\226}\373\244\343?\335\275su\262\207\342?\366\2125\205\"r\342?\352\233\300\364\352\001\341?\004\326=\245$\227\344?SQ=\203\324t\346?\217V.Fb\310\342?\307\256\374\277\230W\342?\272\030\211!\313s\342?\t;\207\r\021\305\342?\235\220\016Ue\367\341?\177\026*\374\235H\345?Z\312@\232 \301\346?\254\223=\224\374\205\345?\022\020\036\264\'\306\343?\325\235qP\320\307\343?b!\364\216n!\341?\230v0kD\210\341?\234\215|\267\004\317\342?\366o\260\234\363l\336?\254\336\250\022\310D\343?\353\257z\243J \343?\246y_\252\333\026\345?#*\231?\177\233\350?\251\307\\\306\007\376\341?4YuxD%\343?\353\257z\243J \343?f\360f\372\303\321\343?\306`\377\243lp\345?H\301\355\037\310\341\344?\327G\002\374\306c\341?\004\213\322&Y\330\346?u\342m(\\j\344?|\246\334\275su\342?\2471\206\311p\200\346?h\004!\251#\360\345?\260\335\001\024\272\256\337?\005}<\263\272\n\343?d5\256=\316?\343?.<\005\361\302\215\343?\214\364v{\326\302\343?g]\"\233\215|\347?\\\274\252&\202\363\342?\241\003\3560\360\362\343?\366\3436w\214\376\343?\315$n9\204{\343?lU\260b\260\377\341?dF\326N\3155\346??\330\234\312Q\302\341?.\343\003\377X\001\342?M\312\243\370\351Z\342?0\254R/\355`\346?\266\022e\346\t#\344?x\350\221c\035\273\342?\316W\346l\201]\354?\315\237\277M\354\363\352?\223\327\243\225\213\221\350?\022[\2112\363\204\341?\247\304\312(\247\325\342?C\226\347$\250|\341?gL\372\211\216\206\344?\356{[q?\250\346?U\237:\237\000\\\343?\n\001D\240D\374\347?S@\025r\325~\343?G\276[\202g\271\345?\201\316P\0333\262\346?\370\236\3573\202\220\344?\205\327\006\364T+\344?Y\022\032{\213W\345?\236\016\362\006.\230\350?\202\227\237K\307\021\353?\300\331e\031\202V\341?\360\327\356\000\n]\347?H\t\307\0003x\343?o}$\300o<\346?\206~\005\002\353\236\342?\\\202g\271\265*\350?\260b\260\377Q6\350?\016\277\216\372\232\266\347?\0320 \331\t\206\342?\312\036J\376\302*\345?\322\250u&\016m\350?\321\342\270\223\3325\343?\214P\n\013\241w\344?;\267\363\246al\337?\375\270\315\035\243\377\344?\237\265\360\024\304\013\347?\261\370\206\374\350\263\343?~\310,\340qa\350?\353S\347\023\200k\342?\352\275\020\027\351\355\346?\227+\305\354x\311\343?J\017\353;\364\310\341?/\005T!W\355\347?5\3060\031\016\320\346?\257N\366P\362\027\346?#\031q.\200\245\345?7\270\232\245o\002\343?\266\307\371g>d\346?\316\313lG\032\357\341?\263\260\255\033~\035\345??\372\354\354O\256\347?J\304\177\275(\n\344?\2471\206\311p\200\346?\301WI\313J\367\347?\245v\315\014{\356\345?\023$\330b\207\344\345?]\030>\266L\250\343?e8@\333.h\342?u\342m(\\j\344?\235\220\016Ue\367\341?0\367\275\255\270\037\344?\026\316h\016~\200\343?mz\222\"\017\024\347?\201d\'\030\312/\342?\010\355\211\361\344\335\345?&\016mXB\000\341?YZ\363[\366\355\343?=.\014\037[&\344?}\267\004\317rk\345?i`\2648\356\244\346?y\240\270\202\262$\344?\366?\312\006W\263\344?XI\313J\367\367\340?M\3309l\210(\346?\302I\263W\254)\344?y\240\270\202\262$\344?\313\305H\014Y\236\343?\376\0039\234n\276\342?\253\202\025\203\375\217\342?p\023\373\274\006\272\341?\246\014\244\t\022l\341?{\243J \023M\343?2\257\344\314M\211\345?\373j\320\001w\030\350?\324A\336\300\005\023\343?3\241NY\257\273\341?\251#\360U\322\262\342?\206\350.\005T!\347?e8@\333.h\342?\302I\263W\254)\344?A7\302\367|\237\341?\205\235\303\206\210b\351?hO\214\'\357\256\343?T\234\250\001\2403\344?\256\341:\260(m\342??40Z\034w\342?c\331\032\256\003\213\342?\027ug\034\024\364\341?~o+\356\007\325\346?\347\246\304\312(\247\345?\033\214\263h\324:\343?\331[\274\252&\202\343?T\347\023\200k\362\341?\016\256f\351\233\300\344?3\241NY\257\273\341?\027\337\220\037}v\346?6\\\007\026\245M\342?\303\266n\370u\324\347?C\\\244\267\333\263\346?0\346\225\234\271)\341?\3312\241NY\257\353?\252\330\204\327\006\364\344?\024oC\341R\243\343?V\373\315.\313\020\344?\226\335\307\320L\342\346?\210\335*/\026|\342?\223\\R\201#\031\341?\241\024\026B\357\350\346?\202\300\272\247\224\344\342?\376\0039\234n\276\342?\275/\325m\213\272\343?\r\007h\333\005M\346?2\372OK\031H\343?\035\222\327\243\225\213\341?\226s\236\315\343_\342?\221Y\300\343\302\360\341?\217\034\353\330\225\377\347?Q,[\303u`\341?\357\265\236\336\013q\341?\006\352\367S\204\265\346?\276\213h\375Uo\344?\314\020\264\212$]\341?\215\233u\211l6\342?H\301\355\037\310\341\344?\265\017\323H\251\372\344?\352\254\350\005\352\367\343?z\353#\001~\343\341?=yw\235&\345\341?\255:<\242\222\371\343?\320\337&\366y\r\344?\037\356j3`@\342?(\306\223w\327i\342?\262T\032\214\263h\344?\262T\032\214\263h\344?YZ\363[\366\355\343?\001\033\205\350.\005\344?\330\264\275\234\220\016\345?$S\264\233Ln\340?\206\332\230\221\265S\343?\031\232I\334r\010\347?\277}\322\211\267\241\340?b}\207\0369\326\341?7%VF9\255\346?\325\371\004\340\232|\344?_wc\343w\205\343?\264\263?\271\336E\344?\312\036J\376\302*\345?\215Bt\227\002\252\340?\270\271c\364\237\226\342?Q\362\027V\251\227\346?yD%\363\347o\343?\262T\032\214\263h\344?G\2553qh\303\342?\'{(\371\013\253\344?\217\013\303\307\226\t\345?v>\001\270&\037\345?\252\330\204\327\006\364\344?\010\203`\356{[\341?Y\245^\332\301\254\341?\335\2030\010\346\276\347?\337\321-$\022\246\344?\355\3034R\252>\345?\320\337&\366y\r\344?\342\214\346\340\0078\345?<\035\344\r\\0\341?J.\251\300\221\214\350?\032Rp\373\007r\350?\305\363C\003\243\305\341?\333\272\341\327Q_\343?\230\322\303\372\016=\342?\232y\302\010\245\260\340?T\234\250\001\2403\344?A7\302\367|\237\341?:\317\346\361/I\344?\333\313\t\351PU\346?<\035\344\r\\0\341?\217\300WI\313J\347?\376_\314+9s\343?\361\201\177\254\000\371\344?\337\034\231\242\335d\342?\204{sd\212v\343?\022\267\034\302\2759\342?E\273\311\344\006\221\346?f\224\323j\371\034\343?^,\370d\254\306\345?@EXk\033m\345?(\306\223w\327i\342?\240\247Z\241%>\343?\027*\374\235H5\344?\377\006\3139\317\346\341?\316o\331\267O:\341?\217\300WI\313J\347?\361\024\304\0137N\341?\222\265Ss\215\245\342?\253\202\025\203\375\217\342?\256\226\3171]\256\344?-\225\006\343,\032\345?CK|\246\334\275\343?\305O\327\222mz\342?\271\315\035\243\377\264\344?\352\275\020\027\351\355\346?\314\020\264\212$]\341?\224\33253\354\271\347?\372V\026S\027\372\345?\370B\\\244\267\333\343?)~\272\226l\323\343?\337\321-$\022\246\344?\225\273w\256N\366\340?\245v\315\014{\356\345?\232\275bM\241\210\354?\367\346\310\024\355&\343?\200*\344\252\375f\347?PK\031H\023$\350?K\266\351I\212<\340?\374\000\247\376\r\226\343?H\322\0251\307\327\347?\211\204)=\254\357\340?\251#\360U\322\262\342?Q\226\204\306\336\342\345?\361\311X\215k\217\343?2\372OK\031H\343?\264\263?\271\336E\344?\035\222\327\243\225\213\341?\325\256\231a\317\275\346?\027\337\220\037}v\346? \361\374\320\300h\341?UC\247\0176\247\342?\206U\352\245\035\314\352?\373Y\250\360w\"\345?\252E@x\320\236\350?\307c\221A\315\230\344?G\2553qh\303\342?\256\003\213\322&Y\350?\341{\276\317\010B\342?\t\245\260\020zG\347?\340\211TC\247\017\346?\366\2125\205\"r\342?\367\346\310\024\355&\343?\203\324tV\364\002\345?\226(3O\030\241\344?#\275\335\236\265\360\344?\214\364v{\326\302\343?\322\250u&\016m\350?M4\315\373R\335\346?\021\305\2625\\\007\346?\305\363C\003\243\305\341?\257\2109\276\276\340\340?\223\311\r\"\355\303\344?,\356\007\325\226\246\346?\317\355\274i\030\333\347?\016\235>\330\234\312\341?\202\300\272\247\224\344\342?\240\247Z\241%>\343?D\003\243\305q\'\345?T\234\250\001\2403\344?\363\204\021Ja!\344?v>\001\270&\037\345?x\371\271t\034\261\345?.\230\230\200\215B\344?\234\351\017G\317\203\343?v\211l6\362\335\342?\031\324\214I?\321\341?P\000\256\311Ge\352?\333ovY\206\240\345?p$#\316\005\260\344?\003\344\323\030\303d\350?9\027\300\322\232\337\342?\2547\252\0042\321\344?\331l\344\273%x\346?1B),\204\336\341?\376\0039\234n\276\342?\354\0346D\024\313\346?\322\363\340\244\331+\346?\335\316\233\206\261}\345?lf\330s\257\365\344?\214?\342\371\241\201\341?\3015\371\250L\013\342?Y\236\223\240\362\305\337?\250k\3116=I\341?\027\031\324\214I?\341?\373\375\024a\255m\344?RN\253\345sL\347?\364\361\314\352*\314\347?r\200\266]\320d\345?\317\'\000\327\344\243\342?\007\035p\207\201\227\337?\014>\031\253q\355\341?-\246.\364+\020\350?\320\224\273w\256N\346?\233\367\245\272mQ\347?+6\341\265\001=\345?\257\252\211\340\274\314\346?\256\341:\260(m\342?\3639\246\313\225b\346?\'\037\225iA\366\343?\363J\316\334\224X\351?\332\002\273\270\274\365\341?\217\034\353\330\225\377\347?\035Gl%\312\314\343?\002w\030x\371\271\344?\\)f\307K\236\346?\307\256\374\277\230W\342?\027*\374\235H5\344?dF\326N\3155\346?\232P\247\254\327\335\350?\0356D\024\313\326\340?\357\306\306\357\ng\344?\004\305\025\224%\241\341?O\3155\226J\203\341?\375K\022}\331T\341?nij\021\020\036\344?\321\360N\007y\003\347?=yw\235&\345\341?\255)\024\221\223\003\341?\367\233]\226!h\345?\233\346}\251n[\344?\3410SQ=\203\344?\332^NH\207\252\342?\026\224%\241\261\267\350?\251\307\\\306\007\376\341?\334\005MV\035\036\341?\271q\212\0235\000\344?Jh\354-^U\343?\210\335*/\026|\342?\236\354\241\344/\254\342?x\350\221c\035\273\342?\274w\256N\366P\342?hO\214\'\357\256\343?\353\257z\243J \343?\226s\236\315\343_\342?\177\272\226l\323\223\344?wA\223U\207G\344?\n\227\032\235\333y\343?\235g\363\370\227$\352?v\211l6\362\335\342?Mn\020i\037\246\341?\321\206%\004\020\201\342?f\266#\215\367\010\351?\023^\033\320S\255\340?\264\376\2527\252\004\342?\305\004l\024\242\273\344?E\252\241\323\007\233\343?mz\222\"\017\024\347? \225iA\366\263\340?\236\223\240\362\305\037\341?\241\362\305\037\361\374\340?t\031\037\370\307\n\340?\3469\t*_\374\341?\260\213\313[\037\t\340?\240\000\\\223\217\312\344?\272c\364\237\2262\340?\320*\222tE\314\341?-\225\006\343,\032\345?\215\233u\211l6\342?\r\366?\312\006W\343?\306\007\376\261\002\344\343? \225iA\366\263\340?\251\307\\\306\007\376\341?\273,C\320*\222\344?\366?\312\006W\263\344?\017Ue\36714\343?\363\027V\251\227v\340?\226(3O\030\241\344?\251#\360U\322\262\342?\226\027\013>\031\253\341?5\3060\031\016\320\346?T\234\250\001\2403\344?\213Mxm@O\345?E\252\241\323\007\233\343?\207\217-\023\352\224\345?5\000t\206\332\230\341?H\322\0251\307\327\347?1\010\346\276\267\025\347?\264\263?\271\336E\344?\353\236R\222K*\340?\205\214\233u\211l\346?\0042\3214\357K\345?\221Y\300\343\302\360\341?\317\203\223f\257X\343?\205\327\006\364T+\344?f\224\323j\371\034\343?}\002pM>*\343?6\311\302\266n\370\345?\004/?\227\216#\346?{\356\265\236\336\013\341?{X\337\241G\216\345?&\303\001\332vA\343?\210\201\227\237K\307\341?\2158\027\300\322\232\337?;\267\363\246al\337?\376N\244\032:}\340?\217\013\303\307\226\t\345?:(\350\343\231\325\345?+\314\267\262\230\272\340?\337\300\005\023\023\260\341?\211\204)=\254\357\340?\276@\375~\212\260\346?0P\277\237\"\254\345?NgE/P\277\337?:\317\346\361/I\344?\313\305H\014Y\236\343?\353S\347\023\200k\342?\252\330\204\327\006\364\344?M\312\243\370\351Z\342?7\003\006$;\301\340?o2\271A\244}\350?\355g\241\302\337\211\344?a/\212\002\r\357\344?\311\302\266n\370u\344?\003\036\027\206\217-\343?\334r\010\367\346\310\344?\246y_\252\333\026\345?9sSbe\224\343?\\)f\307K\236\346?\206\277\023\251\206N\337?8\314TT\317 \345?\203-vH^\217\346?v\324\327\264\275\234\340?\336u\232\224G\361\343?\341A{b<y\347?lf\330s\257\365\344?\rt#|\317\367\351?\3410SQ=\203\344?\253\220\253\366\233]\346?\254\336\250\022\310D\343?8\273,C\320*\342?=.\014\037[&\344?WWa\276\225\305\344?M\333\313\t\351P\345?\221Y\300\343\302\360\341?\016\n\372xfu\345?qo\216L\321n\342?\363\204\021Ja!\344?B\336\300\005\023\023\340?\343\350yp\322\354\345?c\237\327@7\302\347?\241\003\3560\360\362\343?\323Ot4\244\340\346?m\r\327\201Ei\343?\250 ^\270q\212\343?T\347\023\200k\362\341?k\256\261T\032\214\343?\247\304\312(\247\325\342?\304\250\330\204\327\006\344?\017f\215\0101*\346?\030\227\267>\022\340\347?\260@`\335SJ\342?\361\201\177\254\000\371\344?\3165\226J\203q\346?\235V\313\347\230.\347?\216S\234\250\001\240\343?\t\337\363}F\020\342?\371\372\202\303LE\345?\366?\312\006W\263\344?\244\276\246\355\345\204\344?\2344{\305\232B\341?\261\027E\201\206w\352?\374\244\023oC\341\342?7\270\232\245o\002\343?\343~Pmij\341?=\325\n-\361\231\342?\215\233u\211l6\342?Z]\205\371V\026\343?\364\2259[`\027\347?#\254\265\215\266\372\341?\205\327\006\364T+\344?\001\n]\327/\017\341?> v\253\274X\340?\326U\230oe1\345?\016\256f\351\233\300\344?\3165\226J\203q\346?\213\207\273\332\014\030\340?\240\247Z\241%>\343?a@\262\023\014\345\347?6m/\'\244C\345?\245e\245\373{\370\342?\2158\027\300\322\232\337?\022l\261C\362z\344?\262C\362z\264r\341?:\204{sd\212\346?\334\026ug\034\024\344?\236H5t\372`\343?\363\356:M\312\243\350?\212\267\241p\251\321\351?\331l\344\273%x\346?{X\337\241G\216\345?s\224p\0140\203\347?;v\345\377\305\274\342?YZ\363[\366\355\343?%\206,\317IP\351?/\005T!W\355\347?8p\301\304\004l\344?\210\222\277\260J\275\344?\260\006\035p\207\201\347?\001\033\205\350.\005\344?\332\002\273\270\274\365\341?9\276\276\3400S\341?X\376_\314+9\343?1r\017\302 \230\353?\025\'j\000\350\014\345?\256,\246.\364+\340?\303\266n\370u\324\347?\202g\271\265*X\341?\355g\241\302\337\211\344?\257N\366P\362\027\346?!\272K\001U\310\345?\'\037\225iA\366\343?m\036\377\222D_\346?%\013\333\272\341\327\341?*\332M&7\210\344?SQ=\203\324t\346?;\267\363\246al\337?\261\t\257\r\350\251\346?\260b\260\377Q6\350?\214?\342\371\241\201\341?\177r\275\213h\375\345?\232?\177\233\330\347\345?\206\332\230\221\265S\343?\221\375,T\370;\341?\242\006\200\316P\033\343?\227\3171]\256\024\343?|JI.\251\300\341?\327\374\226}\373\244\343?\270\004\317rkU\340?l\261C\362z\264\342?\264\263?\271\336E\344?\376\024a\255m\264\345?z\374K\022}\331\344?1B),\204\336\341?\r\366?\312\006W\343?i\253\037\267\271c\344?5\265\010\010\017\332\343?\027\031\324\214I?\341?M\333\313\t\351P\345?qo\216L\321n\342?\243Q\353L\034\332\340?\365M`z\365\200\350?wA\223U\207G\344?7\024.5:\267\343?\216S\234\250\001\240\343?\307c\221A\315\230\344?\376\024a\255m\264\345?\306\007\376\261\002\344\343?\241\270\202\262$4\346?\206~\005\002\353\236\342?2\236\274\273N\223\342?\311f#\337-\301\343?\240\247Z\241%>\343?\334\200\236j\205\226\350?ME\365\014R\323\351?\327\353nl\374\256\340?J\263W\254)\024\341?\264\263?\271\336E\344?\264\263?\271\336E\344?\034U\002\231h\232\347?\000\000\000\000\000\000\000\000\312\036J\376\302*\345?\022[\2112\363\204\341?3V\343\332\343\374\343?\024\313\326p\035X\344?,\335\337\303\227\260\343?u\206\332\230\221\265\343?gL\372\211\216\206\344?\307c\221A\315\230\344?P\357\205\270Ho\347?>1\236\274\273N\343?\035Gl%\312\314\343?\256\270\037T[\232\352?\272\030\211!\313s\342?\023\023\260Q\210\356\342?\354\013\0163\025\325\343?)3O\030\241\024\346?FQ\240\341\235\016\342?\237\3573\202\220\324\341?\333\310wK\360,\347?\026r\325~\263\313\342?\247\304\312(\247\325\342?W\304\034__p\350?\237\3573\202\220\324\341?\367\233]\226!h\345?\252\312\356ch&\341?R=\203\324tV\344?\252\330\204\327\006\364\344?e8@\333.h\342?@V\200|\032c\350?\031\324\214I?\321\341?\257\231a\317\275\326\343?\363\377b^\311\231\353?>\3462>\360\217\345?\351a}\207\0369\346??\372\354\354O\256\347?,9sSbe\344?\311\261\216]\371\177\341?\270`b\0026\n\341?\320\316\376\344z\027\341?/\200\2455\277e\337?\035\374\000\247\376\r\346?\235-\260\213\313[\337?\310\277$\321\227M\345?h\250\215\031Y;\345?<\343\240\240\217g\346?\364\317|\310,\340\341?E_6U<\334\345?!\002%\342\277^\344?r\200\266]\320d\345?Z\312@\232 \301\346?\320*\222tE\314\341?\214a2\034\240m\347?\010\355\211\361\344\335\345?\267\312\213\005\237\214\345?\232?\177\233\330\347\345?\215\254\235\232k,\345?\n\001D\240D\374\347?\324\214I?\321\321\340?WWa\276\225\305\344?"
      }
    }
  }
}
node {
  name: "Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 704
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 704
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Age/ToFloat"
  op: "Cast"
  input: "Const_8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Age/expand_dims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Age/expand_dims"
  op: "ExpandDims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Age/ToFloat"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Age/expand_dims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Civilite/ToFloat"
  op: "Cast"
  input: "Const"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Civilite/expand_dims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Civilite/expand_dims"
  op: "ExpandDims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Civilite/ToFloat"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Civilite/expand_dims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_AVANT_SOFRECOM/ToFloat"
  op: "Cast"
  input: "Const_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_AVANT_SOFRECOM/expand_dims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_AVANT_SOFRECOM/expand_dims"
  op: "ExpandDims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_AVANT_SOFRECOM/ToFloat"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_AVANT_SOFRECOM/expand_dims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_SOFRECOM/ToFloat"
  op: "Cast"
  input: "Const_2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_SOFRECOM/expand_dims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_SOFRECOM/expand_dims"
  op: "ExpandDims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_SOFRECOM/ToFloat"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_SOFRECOM/expand_dims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_Totale/ToFloat"
  op: "Cast"
  input: "Const_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_Totale/expand_dims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_Totale/expand_dims"
  op: "ExpandDims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_Totale/ToFloat"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_Totale/expand_dims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Manager/ToFloat"
  op: "Cast"
  input: "Const_7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Manager/expand_dims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Manager/expand_dims"
  op: "ExpandDims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Manager/ToFloat"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Manager/expand_dims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Pole/ToFloat"
  op: "Cast"
  input: "Const_6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Pole/expand_dims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Pole/expand_dims"
  op: "ExpandDims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Pole/ToFloat"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Pole/expand_dims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Poste/ToFloat"
  op: "Cast"
  input: "Const_5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Poste/expand_dims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Poste/expand_dims"
  op: "ExpandDims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Poste/ToFloat"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Poste/expand_dims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/SITUATION_FAMILIALE/ToFloat"
  op: "Cast"
  input: "Const_9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/SITUATION_FAMILIALE/expand_dims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/SITUATION_FAMILIALE/expand_dims"
  op: "ExpandDims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/SITUATION_FAMILIALE/ToFloat"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/SITUATION_FAMILIALE/expand_dims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Seniorite/ToFloat"
  op: "Cast"
  input: "Const_4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Seniorite/expand_dims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/Seniorite/expand_dims"
  op: "ExpandDims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Seniorite/ToFloat"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Seniorite/expand_dims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_from_feature_columns/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Age/expand_dims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Civilite/expand_dims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_AVANT_SOFRECOM/expand_dims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_SOFRECOM/expand_dims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/EXPERIENCE_Totale/expand_dims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Manager/expand_dims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Pole/expand_dims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Poste/expand_dims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/SITUATION_FAMILIALE/expand_dims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/Seniorite/expand_dims"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/concat/axis"
  attr {
    key: "N"
    value {
      i: 10
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\310\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.16903084516525269
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.16903084516525269
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/weights/part_0"
  input: "dnn/hiddenlayer_0/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/biases/part_0"
  input: "dnn/hiddenlayer_0/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/weights"
  op: "Identity"
  input: "dnn/hiddenlayer_0/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/concat"
  input: "dnn/hiddenlayer_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/biases"
  op: "Identity"
  input: "dnn/hiddenlayer_0/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Mean"
  op: "Mean"
  input: "dnn/zero_fraction/Cast"
  input: "dnn/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0_fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0_activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0_activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0_activation/tag"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\310\000\000\000d\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1414213627576828
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1414213627576828
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/weights/part_0"
  input: "dnn/hiddenlayer_1/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/biases/part_0"
  input: "dnn/hiddenlayer_1/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/weights"
  op: "Identity"
  input: "dnn/hiddenlayer_1/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/biases"
  op: "Identity"
  input: "dnn/hiddenlayer_1/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_1/Cast"
  input: "dnn/zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1_fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1_activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1_activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1_activation/tag"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "d\000\000\0002\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.20000000298023224
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/weights/part_0"
  input: "dnn/hiddenlayer_2/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_2/biases/part_0"
  input: "dnn/hiddenlayer_2/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_2/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/weights"
  op: "Identity"
  input: "dnn/hiddenlayer_2/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  input: "dnn/hiddenlayer_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/biases"
  op: "Identity"
  input: "dnn/hiddenlayer_2/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_2/MatMul"
  input: "dnn/hiddenlayer_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_2/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  input: "dnn/zero_fraction_2/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_2/Cast"
  input: "dnn/zero_fraction_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_2_fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_2_activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_2_activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_2_activation/tag"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "2\000\000\000\031\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2828427255153656
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2828427255153656
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_3/weights/part_0"
  input: "dnn/hiddenlayer_3/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/weights/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_3/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 25
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/biases/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_3/biases/part_0"
  input: "dnn/hiddenlayer_3/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/biases/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_3/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/weights"
  op: "Identity"
  input: "dnn/hiddenlayer_3/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  input: "dnn/hiddenlayer_3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/biases"
  op: "Identity"
  input: "dnn/hiddenlayer_3/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_3/MatMul"
  input: "dnn/hiddenlayer_3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_3/hiddenlayer_3/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_3/hiddenlayer_3/Relu"
  input: "dnn/zero_fraction_3/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_3/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_3/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_3/Cast"
  input: "dnn/zero_fraction_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_3_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_3_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_3_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_3_fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_3/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_3_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_3_activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_3_activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_3_activation/tag"
  input: "dnn/hiddenlayer_3/hiddenlayer_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\031\000\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.40269362926483154
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40269362926483154
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 25
        }
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_4/weights/part_0"
  input: "dnn/hiddenlayer_4/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/weights/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_4/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/biases/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_4/biases/part_0"
  input: "dnn/hiddenlayer_4/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/biases/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_4/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/weights"
  op: "Identity"
  input: "dnn/hiddenlayer_4/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_3/hiddenlayer_3/Relu"
  input: "dnn/hiddenlayer_4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/biases"
  op: "Identity"
  input: "dnn/hiddenlayer_4/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_4/MatMul"
  input: "dnn/hiddenlayer_4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_4/hiddenlayer_4/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_4/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_4/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_4/hiddenlayer_4/Relu"
  input: "dnn/zero_fraction_4/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_4/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_4/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_4/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_4/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_4/Cast"
  input: "dnn/zero_fraction_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_4_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_4_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_4_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_4_fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_4/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_4_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_4_activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_4_activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_4_activation/tag"
  input: "dnn/hiddenlayer_4/hiddenlayer_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\014\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.6793662309646606
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6793662309646606
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/weights/part_0"
  input: "dnn/logits/weights/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/weights/part_0/read"
  op: "Identity"
  input: "dnn/logits/weights/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/biases/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/biases/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/biases/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/biases/part_0"
  input: "dnn/logits/biases/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/biases/part_0/read"
  op: "Identity"
  input: "dnn/logits/biases/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/weights"
  op: "Identity"
  input: "dnn/logits/weights/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_4/hiddenlayer_4/Relu"
  input: "dnn/logits/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/biases"
  op: "Identity"
  input: "dnn/logits/biases/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_5/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_5/Equal"
  op: "Equal"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_5/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_5/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_5/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_5/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_5/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_5/Cast"
  input: "dnn/zero_fraction_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/logits_fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits_fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits_fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits_fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_5/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits_activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits_activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits_activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits_activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/predictions/scores"
  op: "Squeeze"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "dnn/regression_head/predictions/Identity"
  op: "Identity"
  input: "dnn/regression_head/predictions/scores"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/mean_squared_loss/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/regression_head/mean_squared_loss/ExpandDims"
  op: "ExpandDims"
  input: "Const_10"
  input: "dnn/regression_head/mean_squared_loss/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/mean_squared_loss/ToFloat"
  op: "Cast"
  input: "dnn/regression_head/mean_squared_loss/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/mean_squared_loss/sub"
  op: "Sub"
  input: "dnn/logits/BiasAdd"
  input: "dnn/regression_head/mean_squared_loss/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/mean_squared_loss"
  op: "Square"
  input: "dnn/regression_head/mean_squared_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/mean_squared_loss/loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/regression_head/mean_squared_loss/loss"
  op: "Mean"
  input: "dnn/regression_head/mean_squared_loss"
  input: "dnn/regression_head/mean_squared_loss/loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Identity"
  op: "Identity"
  input: "dnn/regression_head/mean_squared_loss/loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/regression_head/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/regression_head/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/regression_head/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/regression_head/strided_slice"
  op: "StridedSlice"
  input: "dnn/regression_head/Shape"
  input: "dnn/regression_head/strided_slice/stack"
  input: "dnn/regression_head/strided_slice/stack_1"
  input: "dnn/regression_head/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/regression_head/dnn/learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/learning_rate"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/learning_rate/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/learning_rate"
  input: "dnn/regression_head/dnn/learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/learning_rate/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/Fill"
  op: "Fill"
  input: "dnn/regression_head/train_op/dnn/gradients/Shape"
  input: "dnn/regression_head/train_op/dnn/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/Reshape"
  op: "Reshape"
  input: "dnn/regression_head/train_op/dnn/gradients/Fill"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\300\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/Tile"
  op: "Tile"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/Reshape"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 704.0
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/truediv"
  op: "RealDiv"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/Tile"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss_grad/Const"
  op: "Const"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/truediv"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss_grad/Mul"
  op: "Mul"
  input: "dnn/regression_head/mean_squared_loss/sub"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss_grad/Mul_1"
  op: "Mul"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/loss_grad/truediv"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/Neg"
  op: "Neg"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/Neg"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss_grad/Mul_1"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss_grad/Mul_1"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/Neg"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/tuple/control_dependency"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss/sub_grad/tuple/control_dependency"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/regression_head/mean_squared_loss_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_4/hiddenlayer_4/Relu"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/hiddenlayer_4/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_4/hiddenlayer_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/hiddenlayer_4/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/hiddenlayer_4/Relu_grad/ReluGrad"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/hiddenlayer_4/Relu_grad/ReluGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/hiddenlayer_4/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_3/hiddenlayer_3/Relu"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/MatMul_1"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/hiddenlayer_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_3/hiddenlayer_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/hiddenlayer_3/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/hiddenlayer_3/Relu_grad/ReluGrad"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/hiddenlayer_3/Relu_grad/ReluGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/hiddenlayer_3/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/MatMul_1"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/hiddenlayer_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/hiddenlayer_2/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/hiddenlayer_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_from_feature_columns/concat"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 704
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 50
        }
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 25
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 25
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 25
        }
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad/Assign"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad/read"
  op: "Identity"
  input: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_0/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/weights/part_0"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_0/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_0/biases/part_0"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_1/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_1/weights/part_0"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_1/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_1/biases/part_0"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_2/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_2/weights/part_0"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_2/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_2/biases/part_0"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_3/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_3/weights/part_0"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_3/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_3/biases/part_0"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_3/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_4/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_4/weights/part_0"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_4/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/hiddenlayer_4/biases/part_0"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/hiddenlayer_4/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/logits/weights/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/weights/part_0"
  input: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update_dnn/logits/biases/part_0/ApplyAdagrad"
  op: "ApplyAdagrad"
  input: "dnn/logits/biases/part_0"
  input: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad"
  input: "dnn/regression_head/dnn/learning_rate/read"
  input: "dnn/regression_head/train_op/dnn/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train/update"
  op: "NoOp"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_0/biases/part_0/ApplyAdagrad"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_0/weights/part_0/ApplyAdagrad"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_1/biases/part_0/ApplyAdagrad"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_1/weights/part_0/ApplyAdagrad"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_2/biases/part_0/ApplyAdagrad"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_2/weights/part_0/ApplyAdagrad"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_3/biases/part_0/ApplyAdagrad"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_3/weights/part_0/ApplyAdagrad"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_4/biases/part_0/ApplyAdagrad"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/hiddenlayer_4/weights/part_0/ApplyAdagrad"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/logits/biases/part_0/ApplyAdagrad"
  input: "^dnn/regression_head/train_op/dnn/train/update_dnn/logits/weights/part_0/ApplyAdagrad"
}
node {
  name: "dnn/regression_head/train_op/dnn/train/value"
  op: "Const"
  input: "^dnn/regression_head/train_op/dnn/train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/train"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/regression_head/train_op/dnn/train/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/train_op/dnn/control_dependency"
  op: "Identity"
  input: "dnn/regression_head/mean_squared_loss/loss"
  input: "^dnn/regression_head/train_op/dnn/train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/mean_squared_loss/loss"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/total/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/total"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/total/Assign"
  op: "Assign"
  input: "dnn/regression_head/metrics/mean/total"
  input: "dnn/regression_head/metrics/mean/total/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/total/read"
  op: "Identity"
  input: "dnn/regression_head/metrics/mean/total"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/count/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/count"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/count/Assign"
  op: "Assign"
  input: "dnn/regression_head/metrics/mean/count"
  input: "dnn/regression_head/metrics/mean/count/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/count/read"
  op: "Identity"
  input: "dnn/regression_head/metrics/mean/count"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/Size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/ToFloat_1"
  op: "Cast"
  input: "dnn/regression_head/metrics/mean/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/Sum"
  op: "Sum"
  input: "dnn/regression_head/mean_squared_loss/loss"
  input: "dnn/regression_head/metrics/mean/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/AssignAdd"
  op: "AssignAdd"
  input: "dnn/regression_head/metrics/mean/total"
  input: "dnn/regression_head/metrics/mean/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/AssignAdd_1"
  op: "AssignAdd"
  input: "dnn/regression_head/metrics/mean/count"
  input: "dnn/regression_head/metrics/mean/ToFloat_1"
  input: "^dnn/regression_head/mean_squared_loss/loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/truediv"
  op: "RealDiv"
  input: "dnn/regression_head/metrics/mean/total/read"
  input: "dnn/regression_head/metrics/mean/count/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/zeros_like"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/Greater"
  op: "Greater"
  input: "dnn/regression_head/metrics/mean/count/read"
  input: "dnn/regression_head/metrics/mean/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/value"
  op: "Select"
  input: "dnn/regression_head/metrics/mean/Greater"
  input: "dnn/regression_head/metrics/mean/truediv"
  input: "dnn/regression_head/metrics/mean/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/truediv_1"
  op: "RealDiv"
  input: "dnn/regression_head/metrics/mean/AssignAdd"
  input: "dnn/regression_head/metrics/mean/AssignAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/zeros_like_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/Greater_1"
  op: "Greater"
  input: "dnn/regression_head/metrics/mean/AssignAdd_1"
  input: "dnn/regression_head/metrics/mean/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/regression_head/metrics/mean/update_op"
  op: "Select"
  input: "dnn/regression_head/metrics/mean/Greater_1"
  input: "dnn/regression_head/metrics/mean/truediv_1"
  input: "dnn/regression_head/metrics/mean/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/biases/part_0/Assign"
  input: "^dnn/hiddenlayer_0/weights/part_0/Assign"
  input: "^dnn/hiddenlayer_1/biases/part_0/Assign"
  input: "^dnn/hiddenlayer_1/weights/part_0/Assign"
  input: "^dnn/hiddenlayer_2/biases/part_0/Assign"
  input: "^dnn/hiddenlayer_2/weights/part_0/Assign"
  input: "^dnn/hiddenlayer_3/biases/part_0/Assign"
  input: "^dnn/hiddenlayer_3/weights/part_0/Assign"
  input: "^dnn/hiddenlayer_4/biases/part_0/Assign"
  input: "^dnn/hiddenlayer_4/weights/part_0/Assign"
  input: "^dnn/logits/biases/part_0/Assign"
  input: "^dnn/logits/weights/part_0/Assign"
  input: "^dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad/Assign"
  input: "^dnn/regression_head/dnn/learning_rate/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_3/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_3/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_4/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_4/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/logits/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/logits/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/metrics/mean/total"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/total"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/metrics/mean/count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/metrics/mean/count"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 28
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 28
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/weights/part_0"
        string_val: "dnn/hiddenlayer_0/biases/part_0"
        string_val: "dnn/hiddenlayer_1/weights/part_0"
        string_val: "dnn/hiddenlayer_1/biases/part_0"
        string_val: "dnn/hiddenlayer_2/weights/part_0"
        string_val: "dnn/hiddenlayer_2/biases/part_0"
        string_val: "dnn/hiddenlayer_3/weights/part_0"
        string_val: "dnn/hiddenlayer_3/biases/part_0"
        string_val: "dnn/hiddenlayer_4/weights/part_0"
        string_val: "dnn/hiddenlayer_4/biases/part_0"
        string_val: "dnn/logits/weights/part_0"
        string_val: "dnn/logits/biases/part_0"
        string_val: "dnn/regression_head/dnn/learning_rate"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad"
        string_val: "dnn/regression_head/metrics/mean/total"
        string_val: "dnn/regression_head/metrics/mean/count"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 28
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_2/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_3/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_3/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_4/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_4/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/logits/weights/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/logits/biases/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 26
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/weights/part_0"
        string_val: "dnn/hiddenlayer_0/biases/part_0"
        string_val: "dnn/hiddenlayer_1/weights/part_0"
        string_val: "dnn/hiddenlayer_1/biases/part_0"
        string_val: "dnn/hiddenlayer_2/weights/part_0"
        string_val: "dnn/hiddenlayer_2/biases/part_0"
        string_val: "dnn/hiddenlayer_3/weights/part_0"
        string_val: "dnn/hiddenlayer_3/biases/part_0"
        string_val: "dnn/hiddenlayer_4/weights/part_0"
        string_val: "dnn/hiddenlayer_4/biases/part_0"
        string_val: "dnn/logits/weights/part_0"
        string_val: "dnn/logits/biases/part_0"
        string_val: "dnn/regression_head/dnn/learning_rate"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 26
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 26
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 26
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
  input: "^dnn/regression_head/metrics/mean/count/Assign"
  input: "^dnn/regression_head/metrics/mean/total/Assign"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0_fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0_activation"
  input: "dnn/dnn/hiddenlayer_1_fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1_activation"
  input: "dnn/dnn/hiddenlayer_2_fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_2_activation"
  input: "dnn/dnn/hiddenlayer_3_fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_3_activation"
  input: "dnn/dnn/hiddenlayer_4_fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_4_activation"
  input: "dnn/dnn/logits_fraction_of_zero_values"
  input: "dnn/dnn/logits_activation"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 13
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_f90cadce900a479b9765bf7f0bef18e7/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "dnn/hiddenlayer_0/biases"
        string_val: "dnn/hiddenlayer_0/biases/enlayer_0/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/weights"
        string_val: "dnn/hiddenlayer_0/weights/nlayer_0/weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/biases"
        string_val: "dnn/hiddenlayer_1/biases/enlayer_1/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/weights"
        string_val: "dnn/hiddenlayer_1/weights/nlayer_1/weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/biases"
        string_val: "dnn/hiddenlayer_2/biases/enlayer_2/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/weights"
        string_val: "dnn/hiddenlayer_2/weights/nlayer_2/weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_3/biases"
        string_val: "dnn/hiddenlayer_3/biases/enlayer_3/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_3/weights"
        string_val: "dnn/hiddenlayer_3/weights/nlayer_3/weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_4/biases"
        string_val: "dnn/hiddenlayer_4/biases/enlayer_4/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_4/weights"
        string_val: "dnn/hiddenlayer_4/weights/nlayer_4/weights/part_0/Adagrad"
        string_val: "dnn/logits/biases"
        string_val: "dnn/logits/biases/nn/logits/biases/part_0/Adagrad"
        string_val: "dnn/logits/weights"
        string_val: "dnn/logits/weights/n/logits/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/learning_rate"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "200 0,200"
        string_val: "200 0,200"
        string_val: "10 200 0,10:0,200"
        string_val: "10 200 0,10:0,200"
        string_val: "100 0,100"
        string_val: "100 0,100"
        string_val: "200 100 0,200:0,100"
        string_val: "200 100 0,200:0,100"
        string_val: "50 0,50"
        string_val: "50 0,50"
        string_val: "100 50 0,100:0,50"
        string_val: "100 50 0,100:0,50"
        string_val: "25 0,25"
        string_val: "25 0,25"
        string_val: "50 25 0,50:0,25"
        string_val: "50 25 0,50:0,25"
        string_val: "12 0,12"
        string_val: "12 0,12"
        string_val: "25 12 0,25:0,12"
        string_val: "25 12 0,25:0,12"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "12 1 0,12:0,1"
        string_val: "12 1 0,12:0,1"
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/biases/part_0/read"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_0/weights/part_0/read"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_1/biases/part_0/read"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_1/weights/part_0/read"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_2/biases/part_0/read"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_2/weights/part_0/read"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_3/biases/part_0/read"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_3/weights/part_0/read"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_4/biases/part_0/read"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad/read"
  input: "dnn/hiddenlayer_4/weights/part_0/read"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad/read"
  input: "dnn/logits/biases/part_0/read"
  input: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad/read"
  input: "dnn/logits/weights/part_0/read"
  input: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad/read"
  input: "dnn/regression_head/dnn/learning_rate"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "dnn/hiddenlayer_0/biases"
        string_val: "dnn/hiddenlayer_0/biases/enlayer_0/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/weights"
        string_val: "dnn/hiddenlayer_0/weights/nlayer_0/weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/biases"
        string_val: "dnn/hiddenlayer_1/biases/enlayer_1/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/weights"
        string_val: "dnn/hiddenlayer_1/weights/nlayer_1/weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/biases"
        string_val: "dnn/hiddenlayer_2/biases/enlayer_2/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_2/weights"
        string_val: "dnn/hiddenlayer_2/weights/nlayer_2/weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_3/biases"
        string_val: "dnn/hiddenlayer_3/biases/enlayer_3/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_3/weights"
        string_val: "dnn/hiddenlayer_3/weights/nlayer_3/weights/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_4/biases"
        string_val: "dnn/hiddenlayer_4/biases/enlayer_4/biases/part_0/Adagrad"
        string_val: "dnn/hiddenlayer_4/weights"
        string_val: "dnn/hiddenlayer_4/weights/nlayer_4/weights/part_0/Adagrad"
        string_val: "dnn/logits/biases"
        string_val: "dnn/logits/biases/nn/logits/biases/part_0/Adagrad"
        string_val: "dnn/logits/weights"
        string_val: "dnn/logits/weights/n/logits/weights/part_0/Adagrad"
        string_val: "dnn/regression_head/dnn/learning_rate"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 26
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 26
          }
        }
        string_val: "200 0,200"
        string_val: "200 0,200"
        string_val: "10 200 0,10:0,200"
        string_val: "10 200 0,10:0,200"
        string_val: "100 0,100"
        string_val: "100 0,100"
        string_val: "200 100 0,200:0,100"
        string_val: "200 100 0,200:0,100"
        string_val: "50 0,50"
        string_val: "50 0,50"
        string_val: "100 50 0,100:0,50"
        string_val: "100 50 0,100:0,50"
        string_val: "25 0,25"
        string_val: "25 0,25"
        string_val: "50 25 0,50:0,25"
        string_val: "50 25 0,50:0,25"
        string_val: "12 0,12"
        string_val: "12 0,12"
        string_val: "25 12 0,25:0,12"
        string_val: "25 12 0,25:0,12"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "12 1 0,12:0,1"
        string_val: "12 1 0,12:0,1"
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
        shape {
          dim {
            size: 50
          }
        }
        shape {
          dim {
            size: 50
          }
        }
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
        shape {
          dim {
            size: 25
          }
        }
        shape {
          dim {
            size: 25
          }
        }
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
        shape {
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/biases/part_0"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/biases/part_0/Adagrad"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/hiddenlayer_0/weights/part_0"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_0/weights/part_0/Adagrad"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 200
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/hiddenlayer_1/biases/part_0"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/biases/part_0/Adagrad"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/hiddenlayer_1/weights/part_0"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_1/weights/part_0/Adagrad"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 200
          }
          dim {
            size: 100
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "dnn/hiddenlayer_2/biases/part_0"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/biases/part_0/Adagrad"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "dnn/hiddenlayer_2/weights/part_0"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_2/weights/part_0/Adagrad"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_2/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 100
          }
          dim {
            size: 50
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "dnn/hiddenlayer_3/biases/part_0"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/biases/part_0/Adagrad"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "dnn/hiddenlayer_3/weights/part_0"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_3/weights/part_0/Adagrad"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_3/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 50
          }
          dim {
            size: 25
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "dnn/hiddenlayer_4/biases/part_0"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/biases/part_0/Adagrad"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "dnn/hiddenlayer_4/weights/part_0"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/hiddenlayer_4/weights/part_0/Adagrad"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_4/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 25
          }
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "dnn/logits/biases/part_0"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/logits/biases/part_0/Adagrad"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/biases/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "dnn/logits/weights/part_0"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "dnn/regression_head/dnn/dnn/logits/weights/part_0/Adagrad"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/weights/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "dnn/regression_head/dnn/learning_rate"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/regression_head/dnn/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 26
}
